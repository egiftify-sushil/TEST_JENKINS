
def buildStatus = true;
def attachment = false;
def sqlFilePath="";
pipeline {

    agent any
     /**
       Params to define which codebase we want to upload 
     */
    parameters {
        string(name: "BRANCH_NAME", defaultValue: '', description: 'Provide Branch Name')
    }
    stages {        
/**
  STAGE 1.Deleting Pipeline Workspace
*/
         stage('Preparing For Uat Upload'){
             steps {
             		 script {
           			     script {
		           			    if (params.BRANCH_NAME == '') {
							         currentBuild.result = 'ABORTED'
							         error('UPR NUMBER NOT  Definedï¿½')
							     }else{
							          branchname = params.BRANCH_NAME;
							          sqlFilePath = params.DB_FILE_PATH;
							          cleanWs()
							          currentBuild.description = params.BRANCH_NAME
							     }
                           	}
                       	}
                   }
             }             
/**
  STAGE 2. Doing Php Staff  Checkout
*/     stage('PHP Checkout'){
				steps {
					sh ''' 
					mkdir html
					'''
					withCredentials([string(credentialsId: 'CVSPATH', variable: 'CVSPATH'), string(credentialsId: 'CVSPASSWORD', variable: 'CVSPASSWORD')]) {
					checkout changelog: true, poll: false, scm: [$class: 'CVSSCM', canUseUpdate: false, checkoutCurrentTimestamp: false, cleanOnFailedUpdate: false, disableCvsQuiet: true, forceCleanCopy: false, legacy: false, pruneEmptyDirectories: false, 
					repositories: [[compressionLevel: -1, cvsRoot: "${CVSPATH}", excludedRegions: [[pattern: '']], password:"${CVSPASSWORD}", passwordRequired: true, 
					repositoryItems: [[location: [$class: 'BranchRepositoryLocation', branchName: branchname, useHeadIfNotFound: false], 
					modules: [
					
					[localName: 'html/eg_staff_yii2', remoteName: 'eg_staff_yii2'], 
					[localName: 'html/eg_yii2_framework_v2', remoteName: 'eg_yii2_framework_v2']]]]]], 
					skipChangeLog: false]
					}
				}
		 } 
              
/**
STAGE 3.Creating Patch For Staff Portal
*/  	
        stage('Minifying CSS and JS and Creating Folders for S3') {
                steps {
                    sh '''
                        cd html 
                        cd eg_yii2_framework_v2
                        composer install
                        cd ..
                        cd ..
                        find html -type d -name "CVS*" -print0 | xargs -0 -I {} /bin/rm -rf "{}"
                        zip -r html.zip html/*
                    '''
                    
                }
		 }
/**
STAGE 5. Deploying Patch on servers with the help of sshPublisher plugin
*/ 
            stage('PHP'){
                steps {
                    sshPublisher(publishers: [sshPublisherDesc(configName: 'Regalify', 
                    transfers: [sshTransfer(cleanRemote: false, excludes: '', 
                    execCommand: '', 
                    execTimeout: 0, flatten: false, makeEmptyDirs: false, 
                    noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', 
                    remoteDirectorySDF: false, removePrefix: '', sourceFiles: 'html.zip')], 
                    usePromotionTimestamp: false, useWorkspaceInPromotion: false, 
                    verbose: true)])
                    
                    sshPublisher(publishers: [sshPublisherDesc(configName: 'Regalify', 
                    transfers: [sshTransfer(cleanRemote: false, excludes: '', 
                    execCommand: '''
                    cd /home/uat-jenkins/devops                  
                    sudo rm -rf /var/www/html
                    sudo unzip -o html.zip -d /var/www/
                    sudo chmod -R 777 /var/www/html
                    sudo rm -rf /home/uat-jenkins/devops/html.zip''',
                    execTimeout: 0, flatten: false,
                    makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', 
                    remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], 
                    usePromotionTimestamp: false, useWorkspaceInPromotion: false, 
                    verbose: true)])
                }
            }
		}		      
        post {
            success {
                    script{
                        buildStatus = "SUCCESS"
                        }
                    }   
            unstable {
                    script{
                        buildStatus = "UNSTABLE"
                    }
                }
            failure {
                    script{
                        buildStatus = false
                    }
                }
        }    

	}

         
            
