def buildStatus = true
def sqlFilePath = ""

pipeline {
    agent any
    tools {
        jdk 'jdk14'
    }
    
    parameters {
        booleanParam(name: "JAVA_RELEASE", defaultValue: true, description: "Upload Java Codebase")
        booleanParam(name: "PHP_RELEASE", defaultValue: true, description: "Upload PHP Codebase")
        string(name: "BRANCH_NAME", defaultValue: '', description: 'Provide Branch Name')
        string(name: "DB_FILE_PATH", defaultValue: '', description: 'Provide DB File Path (if any)')
    }
    
    stages {
        /**
         * STAGE 1: Deleting Pipeline Workspace
         */
        stage('Preparing For UAT Upload') {
            steps {
                script {
                    if (params.BRANCH_NAME == '') {
                        currentBuild.result = 'ABORTED'
                        error('BRANCH NAME is not defined!')
                    } else {
                        def branchname = params.BRANCH_NAME
                        sqlFilePath = params.DB_FILE_PATH
                        cleanWs()
                        currentBuild.description = params.BRANCH_NAME
                    }
                }
            }
        }

        /**
         * STAGE 2: Code Checkout (Java & PHP in parallel)
         */
        stage('Code Checkout') {
            parallel {
                stage('Java Services Checkout') {
                    when { expression { params.JAVA_RELEASE } }
                    steps {
                        script {
                            checkoutCVSRepo([
                                [localName: 'eg_objects', remoteName: 'eg_objects'],
                                [localName: 'eg_platform', remoteName: 'eg_platform'],
                                [localName: 'scheduler_base', remoteName: 'scheduler_base'],
                                [localName: 'eg_portal_services', remoteName: 'eg_portal_services'],
                                [localName: 'eg_lifeline_services', remoteName: 'eg_lifeline_services'],
                                [localName: 'eg_customer_services', remoteName: 'eg_customer_services'],
                                [localName: 'eg_merchant_services', remoteName: 'eg_merchant_services'],
                                [localName: 'eg_scheduler_services', remoteName: 'eg_scheduler_services'],
                                [localName: 'eg_scheduler', remoteName: 'eg_scheduler']
                            ], params.BRANCH_NAME) // Pass branchname here
                        }
                    }
                }

                stage('PHP Checkout') {
                    when { expression { params.PHP_RELEASE } }
                    steps {
                        script {
                            sh 'mkdir -p html'
                        }
                        checkoutCVSRepo([
                            [localName: 'html/eg_reseller_yii2', remoteName: 'eg_reseller_yii2'],
                            [localName: 'html/eg_customer_yii2', remoteName: 'eg_customer_yii2'],
                            [localName: 'html/eg_staff_yii2', remoteName: 'eg_staff_yii2'],
                            [localName: 'html/eg_merchant_yii2', remoteName: 'eg_merchant_yii2'],
                            [localName: 'html/eg_yii2_framework_v2', remoteName: 'eg_yii2_framework_v2']
                        ], params.BRANCH_NAME) // Pass branchname here
                    }
                }
            }
        }

        /**
         * STAGE 3: Running Maven Build on Services
         */
        stage('Building legacy platform') {
            when { expression { params.JAVA_RELEASE } }
            steps {
                script {
                    def buildSteps = [
                        ['name': 'eg_objects', 'path': 'eg_objects'],
                        ['name': 'eg_platform/platform', 'path': 'eg_platform/platform'],
                        ['name': 'scheduler_base', 'path': 'scheduler_base']
                    ]
                    buildSteps.each { step ->
                        dir(step.path) {
                            sh 'mvn clean install -U'
                        }
                    }
                }
            }
        }

        stage('Building legacy services') {
            when { expression { params.JAVA_RELEASE } }
            parallel {
                stage('Build eg_portal_services') {
                    steps {
                        dir('eg_portal_services') {
                            sh 'mvn clean package'
                        }
                    }
                }
                stage('Build eg_customer_services') {
                    steps {
                        dir('eg_customer_services') {
                            sh 'mvn clean package'
                        }
                    }
                }
                stage('Build eg_lifeline_services') {
                    steps {
                        dir('eg_lifeline_services') {
                            sh 'mvn clean package'
                        }
                    }
                }
                stage('Build eg_merchant_services') {
                    steps {
                        dir('eg_merchant_services') {
                            sh 'mvn clean package'
                        }
                    }
                }
                stage('Build eg_scheduler_services') {
                    steps {
                        dir('eg_scheduler_services') {
                            sh 'mvn clean package'
                        }
                    }
                }
                stage('Build eg_scheduler') {
                    steps {
                        dir('eg_scheduler') {
                            sh 'mvn clean package'
                        }
                    }
                }
            }
        }
        
        /**
         * STAGE 4: Creating Patch (Java & PHP in parallel)
         */
        stage('Create Patch') {
            parallel {
                stage('Create Java Patch') {
                    when { expression { params.JAVA_RELEASE } }
                    steps {
                        sh '''
                        mkdir -p webapps/{eg_portal_services,eg_customer_services,eg_merchant_services,eg_lifeline_services,eg_scheduler_services,eg_scheduler/lib}
                        unzipWarToWebapp('eg_portal_services')
                        unzipWarToWebapp('eg_customer_services')
                        unzipWarToWebapp('eg_lifeline_services')
                        unzipWarToWebapp('eg_merchant_services')
                        unzipWarToWebapp('eg_scheduler_services')
                        unzipLibToWebapp('eg_scheduler')
                        zip -r webapps.zip webapps
                        '''
                    }
                }

                stage('Create PHP Patch') {
                    when { expression { params.PHP_RELEASE } }
                    steps {
                        sh '''
                        cd html/eg_yii2_framework_v2 && composer install
                        sudo find html -type d -name "CVS*" -exec rm -rf {} +
                        zip -r html.zip html/*
                        '''
                    }
                }
            }
        }

        // Additional stages for patch deployment, CDN syncing, DB script execution, and notifications
    }

    post {
        success {
            script { buildStatus = "SUCCESS" }
            // sendEmailNotification(buildStatus)
        }
        unstable {
            script { buildStatus = "UNSTABLE" }
            // sendEmailNotification(buildStatus)
        }
        failure {
            script { buildStatus = "FAILURE" }
            // sendEmailNotification(buildStatus)
        }
    }
}

def sendEmailNotification(status) {
    emailext(
        subject: "Build ${status}: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
        body: "Build status: ${status}. Check console output at ${env.BUILD_URL}",
        recipientProviders: [[$class: 'DevelopersRecipientProvider']]
    )
}

// Helper functions
def checkoutCVSRepo(repositories, branchname) { // Accept branchname as a parameter
    withCredentials([string(credentialsId: 'CVSPATH', variable: 'CVSPATH'), string(credentialsId: 'CVSPASSWORD', variable: 'CVSPASSWORD')]) {
        checkout([$class: 'CVSSCM',
            changelog: true, poll: false, canUseUpdate: false,
            repositories: repositories.collect { repo ->
                [compressionLevel: -1, cvsRoot: "${CVSPATH}", password: "${CVSPASSWORD}",
                 repositoryItems: [[location: [$class: 'BranchRepositoryLocation', branchName: branchname], modules: [[localName: repo.localName, remoteName: repo.remoteName]]]]]
            },
            skipChangeLog: false
        ])
    }
}

def unzipWarToWebapp(serviceDir) {
    sh '''
    if [ -d "${serviceDir}" ]; then
        cd ${serviceDir}
        unzip -o target/${serviceDir}.war -d ../webapps/${serviceDir}
        cd ..
    fi
    '''
}

def unzipLibToWebapp(serviceDir) {
    sh '''
    if [ -d "${serviceDir}" ]; then
        cd ${serviceDir}
        cp -r target/lib/* ../webapps/${serviceDir}/lib
        cd ..
    fi
    '''
}
