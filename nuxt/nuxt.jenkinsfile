def gitbranch = ''
def gitbranch1 = '1.0.0'
def buildStatus = true
def attachment = false
def sqlFilePath = ''

def nuxtlibrariesRepos = [
    'eslint_plugin',
    'eslint',
    'fe_communicator',
    'fe_ts_utils',
]

def nuxtRepos = [
    'js_object_library',    
    'nuxt_object_library',
    'nuxt_common_modules',
]

pipeline {
    agent any

    tools {
        jdk 'jdk14'
        jdk 'jdk17'
        nodejs 'nodejs18'
    }

    parameters {
        string(name: 'GIT_BRANCH_NAME', defaultValue: '', description: 'Provide GIT Branch Name')
        string(name: 'DB_FILE_PATH', defaultValue: '', description: 'Provide db file path if any')
    }

    stages {
        stage('Preparing For UAT Upload') {
            steps {
                script {
                    gitbranch = params.GIT_BRANCH_NAME
                    sqlFilePath = params.DB_FILE_PATH

                    // Clean workspace
                    cleanWs()
                }
            }
        }

        stage('Checkout Repositories') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'GitUrl', variable: 'GitUrl')]) {
                        parallel (
                            "Nuxt Libraries": {
                                nuxtlibrariesRepos.each { repo ->
                                    dir(repo) {
                                        checkout([
                                            $class: 'GitSCM',
                                            branches: [[name: "${gitbranch1}"]],
                                            userRemoteConfigs: [[url: "${GitUrl}/${repo}.git"]]]
                                        )
                                    }
                                }
                            },
                            "Nuxt Repos": {
                                nuxtRepos.each { repo ->
                                    dir(repo) {
                                        checkout([
                                            $class: 'GitSCM',
                                            branches: [[name: "${gitbranch}"]],
                                            userRemoteConfigs: [[url: "${GitUrl}/${repo}.git"]]]
                                        )
                                    }
                                }
                            }
                        )
                    }
                }
            }
        }
        stage('platform') {
                    when { expression { params.OPS_RELEASE } }

                    steps {
                        script {
                           echo(node -v)
                        }
                    }
                }
    }

    post {
        success {
            script {
                buildStatus = 'SUCCESS'
            }
        }
        unstable {
            script {
                buildStatus = 'UNSTABLE'
            }
        }
        failure {
            script {
                buildStatus = false
            }
        }
    }
}
