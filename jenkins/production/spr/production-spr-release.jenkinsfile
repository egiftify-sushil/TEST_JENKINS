/**
THIS FILE UPLOADS CODE ON MARINER 1 APOLLO 1 EXPLORER

SPR RELEASE Pipeline For MARINER 1 and APOLLO 1.
We can upload to any codebase like java OR Php OR Delivery depending upon the user choice
There are 10 main stages involved in releasing the SPR
STAGE 1:-  Verifying SPR param and deleting pipeline workspace.
STAGE 2:-  Removing instance from taget groups.(MARINER 1 & APOLLO 1) {Parallel}
STAGE 3:-  Taking backup of old codes on servers in /var/devops/backups/{codebase}-sprNumber.zip. {Parallel}
STAGE 4:-  Code checkout from SPR branch (all selected projects) using CVSSCM plugin configured on the jenkins. {Parallel}
STAGE 5:-  Running maven build on services and scheduler. Also running the composer to install yii2 framework {Parallel}
STAGE 6:-  Creating patch (code packaging). {Parallel}
STAGE 7:-  Deploying patch on production servers (MARINER 1, EXPLORER 1, APOLLO 1) with the help of sshPublisher plugin.{Parallel}
STAGE 8:-  CDN syncing & invalidating assets using aws CLI.
STAGE 9:-  Adding Mariner 1 and Apollo 1 on TG & removing Apollo2 and Mariner 2 from TG.{Parallel}
STAGE 10:- Sending Email notification to developers.

PLUGINS USED:-
sshPublisher:- To upload folder and to execute ssh script on remote server 
CVSSCM:- To checkout the code from repository server

**/
def sprNumber = "";
def servers = "";
def buildStatus = "SUCCESS";
def attachment = false;
pipeline {

     /** Defining workspace for the node **/
     agent {
             node {
		            label ''
		            customWorkspace '/var/devops/spr/'
         		 }
          }
          
    /**
     Setting jdk for java build
    */
     tools {
       jdk "jdk14"
     }
     /**
       Params to define which codebase we want to upload 
     */
    parameters {
        booleanParam(name: "MARINER", defaultValue: false)
        booleanParam(name: "APOLLO", defaultValue: false)
        booleanParam(name: "EXPLORER", defaultValue: false)
        string(name: "SPR_NUMBER", defaultValue: '', description: 'Provide SPR Number')
    }
    stages {        
/**
  STAGE 1.Verifying Spr param and Deleting Pipeline Workspace
*/
       stage('Initiate SP Release'){
             steps {
             		 script {
           			    if (params.SPR_NUMBER == '') {
					         currentBuild.result = 'ABORTED'
					         error('SPR NUMBER Not  Definedï¿½')
					     }else{
					          sprNumber = params.SPR_NUMBER;
					          if(params.MARINER)
					            servers = "MARINER 1 ";
					          if(params.APOLLO)  
					            servers = servers+"APOLLO 1 ";
					          if(params.EXPLORER)
					            servers = servers+"EXPLORER";
					            cleanWs()
					            currentBuild.description = "SPR " +params.SPR_NUMBER
					     }
                       }
                   }
            }
/**
  STAGE 2. Removing instance from taget groups.
           AWS CLI configured on jenkins used to perform this task
 */
       stage('Detach Servers From TG'){
      	  parallel{
	         stage('Removing APOLLO 1 From TG'){
              when { expression { params.APOLLO } }
                   steps 
                   {
			            sh 'aws elbv2 deregister-targets \
   						 --target-group-arn arn:aws:elasticloadbalancing:us-east-1:347638288157:targetgroup/ApolloTG/6d4a1efc659bc963\
   						 --targets Id=i-09af9ac9afcd3554c'
   						 
   						sh 'aws elbv2 deregister-targets \
   						 --target-group-arn arn:aws:elasticloadbalancing:us-east-1:347638288157:targetgroup/equinoxTG443/c5cb9ccbf35c210e\
   						 --targets Id=i-09af9ac9afcd3554c'
   						 
   						sh 'aws elbv2 deregister-targets \
   						 --target-group-arn  arn:aws:elasticloadbalancing:us-east-1:347638288157:targetgroup/DIGITALGIFTCARDMANAGERTG/a84a1f3691ab0eee\
   						 --targets Id=i-09af9ac9afcd3554c'
   					
						sh 'aws elbv2 deregister-targets \
   						 --target-group-arn  arn:aws:elasticloadbalancing:us-east-1:347638288157:targetgroup/DigitalGiftManagerTG/02c5aa89247e4c6a\
   						 --targets Id=i-09af9ac9afcd3554c'
   						 
                    }
                }
	          stage('Removing MARINER 1 From TG'){
                when { expression { params.MARINER } }
                    steps 
                    {
			            sh 'aws elbv2 deregister-targets \
   						 --target-group-arn arn:aws:elasticloadbalancing:us-east-1:347638288157:targetgroup/MarinerELBTG/29560997cb33d2d2\
   						 --targets Id=i-0a06ca56b6263d446'
                    }
                }   
			 }
		  }
             
/**
 STAGE 3. Taking backup of old codes on servers in /var/devops/backups/ dir
          ssh plugin used to excute the ssh  command on all remote servers
*/
   stage('Backup'){
     parallel{
       stage('MARINER 1'){
        when { expression { params.MARINER } }
           steps {
		          	sshPublisher(publishers: [sshPublisherDesc(configName: 'Mariner1',
		          	 transfers: [sshTransfer(cleanRemote: false, excludes: '', 
		          	execCommand: """cd /var/devops/backups
					sudo rm -rf webapps*
					cd /var/lib/tomcat9/webapps
					sudo zip -r   /var/devops/backups/webapps-${sprNumber}.zip  ROOT es eg_portal_services egCustomerServices""" , 
					execTimeout: 0, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false,
					patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, 
					removePrefix: '', sourceFiles: '')], 
					usePromotionTimestamp: false, 
					useWorkspaceInPromotion: false, verbose: true)])
		          }
            } 
            stage('EXPLORER'){
             when { expression { params.EXPLORER } }
               steps {
			          sshPublisher(publishers: [sshPublisherDesc(configName: 'Explorer',
			           transfers: [sshTransfer(cleanRemote: false, excludes: '', 
			           execCommand: """cd /var/devops/backups
						sudo rm -rf delivery*
						cd /var/lib/tomcat9/webapps
						sudo zip -r  /var/devops/backups/delivery-${sprNumber}.zip eg_scheduler/* eg_scheduler_services/*
						""" , execTimeout: 0, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, 
						patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, 
						removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, 
						useWorkspaceInPromotion: false, verbose: true)])
			          }
           }
            stage('APOLLO 1'){
            when { expression { params.APOLLO } }
             steps {
		           sshPublisher(publishers: [sshPublisherDesc(configName: 'Apollo1', 
		           transfers: [sshTransfer(cleanRemote: false, excludes: '',
		            execCommand: """cd /var/devops/backups
					sudo rm -rf html*
				    cd /var/www/html
					sudo zip -r /var/devops/backups/html-${sprNumber}.zip  eg_customer_yii2/* eg_reseller_yii2/* eg_staff_yii2/* eg_merchant_yii2/* eg_yii2_framework_v2/* -x 'eg_customer_yii2/runtime/*' 'eg_reseller_yii2/runtime/*' 'eg_staff_yii2/runtime/*' 'eg_merchant_yii2/runtime/*' 'eg_yii2_framework_v2/runtime/*'""" ,
					execTimeout: 0, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, 
					patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, 
					removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, 
					useWorkspaceInPromotion: false, verbose: true)])
		          }
            }  
          }
         } 

/**
 STAGE 4. Doing Checkout of SPR code using CVSSCM plugin configured on the jenkins.     
 */      
   stage('Code Checkout'){
      parallel{
         stage('Java  Checkout'){
    	   when { expression { params.MARINER ||  params.EXPLORER} }
             steps {
		              withCredentials([string(credentialsId: 'CVSPATH', variable: 'CVSPATH'), string(credentialsId: 'CVSPASSWORD', variable: 'CVSPASSWORD')]) {
		              checkout changelog: true, poll: false, scm: [$class: 'CVSSCM', canUseUpdate: false, checkoutCurrentTimestamp: false, cleanOnFailedUpdate: true, disableCvsQuiet: true, forceCleanCopy: false, legacy: true, pruneEmptyDirectories: false, 
		              repositories: [[compressionLevel: -1, cvsRoot: "${CVSPATH}", excludedRegions: [[pattern: '']], password:"${CVSPASSWORD}", passwordRequired: true, 
		              repositoryItems: [[location: [$class: 'BranchRepositoryLocation', branchName: sprNumber, useHeadIfNotFound: false], 
		              modules: [[localName: 'eg_objects', remoteName: 'eg_objects'], 
		              [localName: 'eg_platform', remoteName: 'eg_platform'], 
		              [localName: 'scheduler_base', remoteName: 'scheduler_base'], 
		              [localName: 'eg_portal_services', remoteName: 'eg_portal_services'], 
		              [localName: 'eg_lifeline_services', remoteName: 'eg_lifeline_services'], 
		              [localName: 'eg_customer_services', remoteName: 'eg_customer_services'], 
		              [localName: 'eg_merchant_services', remoteName: 'eg_merchant_services'],
		              [localName: 'eg_scheduler_services', remoteName: 'eg_scheduler_services'],
		              [localName: 'eg_scheduler', remoteName: 'eg_scheduler']]]]]], 
		              skipChangeLog: false]
	               }
                }
            }
            stage('PHP Checkout'){
              	when { expression { params.APOLLO } }
                  steps {
		                  sh ''' 
		                   mkdir html
		                  '''
			              withCredentials([string(credentialsId: 'CVSPATH', variable: 'CVSPATH'), string(credentialsId: 'CVSPASSWORD', variable: 'CVSPASSWORD')]) {
			              checkout changelog: true, poll: false, scm: [$class: 'CVSSCM', canUseUpdate: false, checkoutCurrentTimestamp: false, cleanOnFailedUpdate: false, disableCvsQuiet: true, forceCleanCopy: false, legacy: false, pruneEmptyDirectories: false, 
			              repositories: [[compressionLevel: -1, cvsRoot: "${CVSPATH}", excludedRegions: [[pattern: '']], password:"${CVSPASSWORD}", passwordRequired: true, 
			              repositoryItems: [[location: [$class: 'BranchRepositoryLocation', branchName: sprNumber, useHeadIfNotFound: false], 
			              modules: [
			              [localName: 'html/eg_reseller_yii2', remoteName: 'eg_reseller_yii2'], 
			              [localName: 'html/eg_customer_yii2', remoteName: 'eg_customer_yii2'], 
			              [localName: 'html/eg_staff_yii2', remoteName: 'eg_staff_yii2'], 
			              [localName: 'html/eg_merchant_yii2', remoteName: 'eg_merchant_yii2'],
			              [localName: 'html/eg_yii2_framework_v2', remoteName: 'eg_yii2_framework_v2']]]]]], 
			              skipChangeLog: false]
                         }
                    }
                 } 
              } 
           }  
  
/**
   STAGE 5.Running Maven Build on Services,Scheduler and doing composer install on yii2 framework
 */  
    stage('Build  Platform') {
		             when { expression { params.MARINER || params.EXPLORER } }
			               steps{
			                      sh '''cd eg_objects
										mvn clean
										mvn install -U
										cd ..
										cd eg_platform
										cd platform
										mvn clean
										mvn install -U
										cd ..
										mvn clean
										mvn install -U 
										cd ..
										cd scheduler_base
										mvn clean
										mvn install -U
										'''
			                    } 
		            }
       stage('Build'){
               parallel{

				
                    stage('Building Portal Services'){
                      when { expression { params.MARINER} }
                        steps {
                          sh '''
                           cd eg_portal_services
						   mvn clean
						   mvn package
							'''
						  }
				     }
				     stage('Building Customer Services'){
                      when { expression { params.MARINER} }
                        steps {
                          sh '''cd eg_customer_services
 								 mvn clean
								 mvn package'''
					  				
						  }
				      } 
					  stage('Building Lifeline Services'){
                    	   when { expression { params.MARINER} }
	                       steps {
	                          sh '''cd eg_lifeline_services
 								 mvn clean
								 mvn package'''
							 }
					  } 	
				      stage('Building Merchant Services'){
                    	   when { expression { params.MARINER} }
	                       steps {
	                          sh '''cd eg_merchant_services
 								 mvn clean
								 mvn package'''
							  }
				       }
			          stage('Building Scheduler Services'){
                	   when { expression { params.EXPLORER} }
                       steps {
                           sh '''cd eg_scheduler_services
							 mvn clean
							 mvn package'''
						  }
						 }
					  stage('Building Scheduler'){
                	   when { expression { params.EXPLORER} }
                       steps {
                          sh''' cd eg_scheduler
							 mvn clean
							 mvn package'''
						  }
					   }
					 stage('Building Yii2 Framework'){
                	   when { expression { params.APOLLO} }
                       steps {
                          sh''' cd html
								cd eg_yii2_framework_v2
								composer install'''
						  }
					    }
				      }
				    }     
                    
/**
   STAGE 6.Creating Patch (Running maven build,php composer and code packaging)
*/  
	 stage('Create Patch')
  	 {
        parallel{
        	 stage('Creating Services Patch'){
         		when { expression { params.MARINER} }
            		steps {
		               sh '''
		               mkdir webapps
		               mkdir webapps/eg_portal_services
		               mkdir webapps/egCustomerServices
		               mkdir webapps/es
		               mkdir webapps/ROOT
		                if [ -d "eg_portal_services" ]; then
							cd eg_portal_services
							unzip -o target/eg_portal_services.war -d ../webapps/eg_portal_services
							cd ..
						fi
		                if [ -d "eg_customer_services" ]; then
							cd eg_customer_services
							unzip -o target/eg_customer_services.war -d ../webapps/egCustomerServices
						    cd ..
						 fi
		                 if [ -d "eg_lifeline_services" ]; then
							cd eg_lifeline_services
							unzip -o target/eg_lifeline_services.war -d ../webapps/ROOT
							cd ..
						  fi
		                  if [ -d "eg_merchant_services" ]; then
						     cd eg_merchant_services
							 unzip -o target/eg_merchant_services.war -d ../webapps/es
							  cd ..
						 fi'''
						 sh"zip -r webapps-${sprNumber}.zip webapps"
						
				  }
           }
           stage('Creating Scheduler Patch'){
                        when { expression { params.EXPLORER} }
                        steps {
                          sh '''
                            if [ ! -d "deliverywebapps" ]; then
                              mkdir deliverywebapps
                            fi
                          	mkdir deliverywebapps/eg_scheduler_services
                          	mkdir deliverywebapps/eg_scheduler
 							mkdir deliverywebapps/eg_scheduler/lib
							cd eg_scheduler_services
							unzip -o target/eg_scheduler_services.war -d ../deliverywebapps/eg_scheduler_services
						    cd ..
							cd eg_scheduler
							cp -r target/lib/* ../deliverywebapps/eg_scheduler/lib
							cd ..
							'''
							 sh"""cd deliverywebapps
							 zip -r ../delivery_webapps-${sprNumber}.zip eg_scheduler eg_scheduler_services"""
                        }
              }
       	  stage('Creating PHP Patch'){
                when { expression { params.APOLLO} }
                steps {
                  sh '''
					sudo find html -type d -name "CVS*" -print0 | xargs -0 -I {} /bin/rm -rf "{}"
					'''
				  sh"zip -r html-${sprNumber}.zip html/*"	
                }
             } 
          }
       }   
                     
/**
 STAGE 7. Deploying Patch on servers(MARINER 1, EXPLORER 1, APOLLO 1) with the help of sshPublisher plugin
*/ 
         stage('Deploy Patch'){
                 parallel{
                    stage('MARINER 1'){
                      when { expression { params.MARINER} }
                        steps {
				         	sshPublisher(publishers: [sshPublisherDesc(configName: 'Mariner1', transfers: [sshTransfer(cleanRemote: false, excludes: '',
				         	execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, 
				         	patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', 
				         	sourceFiles:"webapps-${sprNumber}.zip")], usePromotionTimestamp: false, useWorkspaceInPromotion: false, 
				         	verbose: true)])
                        
		                    sshPublisher(publishers: [sshPublisherDesc(configName: 'Mariner1', transfers: [sshTransfer(cleanRemote: false, excludes: '', 
		                    execCommand: """cd /home/devops
							cd /var/lib/tomcat9/webapps
							sudo rm -rf  ROOT/WEB-INF/lib/*
							sudo rm -rf  es/WEB-INF/lib/*
							sudo rm -rf  eg_portal_services/WEB-INF/lib/*
							sudo rm -rf  egCustomerServices/WEB-INF/lib/*
							cd /home/devops
							sudo unzip -o webapps-${sprNumber}.zip -d /var/lib/tomcat9/
							cd /opt/tomcat9/bin
							sudo ./shutdown.sh
							sleep 5
							sudo ./startup.sh
							sudo rm -rf /home/devops/webapps-${sprNumber}.zip""", 
							execTimeout: 0, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, 
							patternSeparator: '[, ]+',
							remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, 
							useWorkspaceInPromotion: false, verbose: true)])
						}
                      }
                      stage('EXPLORER 1'){
                        when { expression { params.EXPLORER} }
                        steps {
	  				        sshPublisher(publishers: [sshPublisherDesc(configName: 'Explorer', 
	  				        transfers: [sshTransfer(cleanRemote: false, excludes: '', 
	  				        execCommand: '', execTimeout: 0, flatten: false, makeEmptyDirs: false, 
	  				        noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', 
	  				        remoteDirectorySDF: false, removePrefix: '', 
	  				        sourceFiles: "delivery_webapps-${sprNumber}.zip")], 
	  				        usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true)])
	  				        
		                    sshPublisher(publishers: [sshPublisherDesc(configName: 'Explorer', 
		                    transfers: [sshTransfer(cleanRemote: false, excludes: '', 
		                    execCommand: """cd /home/devops
							cd /var/lib/tomcat9/webapps
							sudo rm -rf  eg_scheduler_services/WEB-INF/lib/*
							sudo rm -rf  eg_scheduler/lib/*
							cd /home/devops
							sudo unzip -o delivery_webapps-${sprNumber}.zip -d /var/lib/tomcat9/webapps/
							sudo rm -rf /home/devops/delivery_webapps-${sprNumber}.zip""", 
							execTimeout: 0, flatten: false, 
							makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', 
							remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')],
							usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true)])
					       
					        sshPublisher(publishers: [sshPublisherDesc(configName: 'Explorer', 
					        transfers: [sshTransfer(cleanRemote: false, excludes: '', 
							execCommand: '''cd /var/www/html/shfiles
							sudo ./newkillSchedularProcess.sh
							cd /opt/tomcat9/bin
							sudo ./shutdown.sh  2>/dev/null
							sudo sleep 5
							sudo ./startup.sh
							sudo sleep 10
							cd /var/www/html/shfiles
							sudo ./schedularProcess.sh''',
						 	execTimeout: 0, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, 
						 	patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, 
						 	removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, 
						 	useWorkspaceInPromotion: false, 
						 	verbose: true)])
						}	   
                      }
                      stage('APOLLO 1'){
                        when { expression { params.APOLLO} }
	                        steps {
	                        sshPublisher(publishers: [sshPublisherDesc(configName: 'Apollo1', 
	                        transfers: [sshTransfer(cleanRemote: false, excludes: '', 
	                        execCommand: '', execTimeout: 0, flatten: false, makeEmptyDirs: false, 
	                        noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', 
	                        remoteDirectorySDF: false, removePrefix: '', 
	                        sourceFiles: "html-${sprNumber}.zip")], usePromotionTimestamp: false, 
	                        useWorkspaceInPromotion: false, verbose: true)])
	                        
	                        sshPublisher(publishers: [sshPublisherDesc(configName: 'Apollo1', 
	                        transfers: [sshTransfer(cleanRemote: false, excludes: '', 
	                        execCommand: """cd /home/devops
							sudo rm -rf  /var/www/html/eg_yii2_framework_v2/*
							sudo unzip -o html-${sprNumber}.zip -d /var/www/
							sudo chmod -R 777 /var/www/html/eg_yii2_framework_v2/
							sudo rm -rf /home/devops/html-${sprNumber}.zip""", 
							execTimeout: 0, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false,
						 	patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, 
						 	removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, 
						 	useWorkspaceInPromotion: false, verbose: true)])
                          }
                       }
					   
                    }
				}
/**
  STAGE 8.Syncing & Invalidating assets using aws CLI
**/
        stage('CDN Sync')
		   {
		     when { expression { params.APOLLO} }
               steps {
		        sshPublisher(publishers: [sshPublisherDesc(configName: 'Apollo1', 
		        transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '''cd /home/devops
				if [ ! -d "common" ]; then
				     sudo mkdir common
				     sudo mkdir common/css
				     sudo mkdir common/js
				fi
				cd /var/www/html
				find eg_customer_yii2/components eg_merchant_yii2/components eg_staff_yii2/components eg_reseller_yii2/components -type f -name "*.css" -exec cp -n {} /home/devops/common/css/ \\;
				find eg_customer_yii2/components eg_merchant_yii2/components eg_staff_yii2/components  eg_reseller_yii2/components -type f -name "*.js" -exec cp -n {} /home/devops/common/js/ \\;
				sudo rm -rf /home/devops/common/js/awss3.js
				cd eg_yii2_framework_v2/egiftify_extensions
				sudo aws s3 cp --recursive onboarding/js/ s3://egiftifyprod/public/js/common/
				sudo aws s3 cp --recursive onboarding/css/ s3://egiftifyprod/public/css/common/
				sudo aws s3 cp --recursive egiftify/js/ s3://egiftifyprod/public/js/common/
				sudo aws s3 cp --recursive egiftify/css/ s3://egiftifyprod/public/css/common/
				sudo aws s3 cp --recursive payment/js/ s3://egiftifyprod/public/js/common/
				sudo aws s3 cp --recursive payment/css/ s3://egiftifyprod/public/css/common/
				sudo aws s3 cp --recursive commonAssets/js/ s3://egiftifyprod/public/js/common/
				sudo aws s3 cp --recursive commonAssets/css/ s3://egiftifyprod/public/css/common/
				sudo aws s3 cp --recursive payment/images/ s3://egiftifyprod/public/images/common/
				sudo aws s3 cp --recursive onboarding/images/ s3://egiftifyprod/public/images/common/
				cd /var/www/html
				sudo aws s3 cp --recursive eg_customer_yii2/js/ s3://egiftifyprod/public/js/marketplace/
				sudo aws s3 cp --recursive eg_staff_yii2/js/ s3://egiftifyprod/public/js/staff/
				sudo aws s3 cp --recursive eg_reseller_yii2/js/ s3://egiftifyprod/public/js/reseller/
				sudo aws s3 cp --recursive eg_merchant_yii2/js/ s3://egiftifyprod/public/js/merchant/
				sudo aws s3 cp --recursive /home/devops/common/js/ s3://egiftifyprod/public/js/common/
				sudo aws s3 cp --recursive eg_customer_yii2/css/ s3://egiftifyprod/public/css/marketplace/
				sudo aws s3 cp --recursive eg_staff_yii2/css/ s3://egiftifyprod/public/css/staff/
				sudo aws s3 cp --recursive eg_reseller_yii2/css/ s3://egiftifyprod/public/css/reseller/
				sudo aws s3 cp --recursive eg_merchant_yii2/css/ s3://egiftifyprod/public/css/merchant/
				sudo aws s3 cp --recursive /home/devops/common/css/ s3://egiftifyprod/public/css/common/
				sudo aws s3 cp --recursive eg_customer_yii2/images/ s3://egiftifyprod/public/images/marketplace/
				sudo aws s3 cp --recursive eg_staff_yii2/images/ s3://egiftifyprod/public/images/staff/
				sudo aws s3 cp --recursive eg_reseller_yii2/images/ s3://egiftifyprod/public/images/reseller/
				sudo aws s3 cp --recursive eg_merchant_yii2/images/ s3://egiftifyprod/public/images/merchant/
				sudo aws cloudfront create-invalidation --distribution-id E22WMQKERMKCSE --paths "/js/*" "/css/*" "/images/*"
				sudo rm -rf /home/devops/common/css/*
				sudo rm -rf /home/devops/common/js/*''',  
				execTimeout: 0, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, 
				patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, 
				removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, 
				useWorkspaceInPromotion: false, verbose: true)])
		      }
			}
              
/**
 STAGE 8. Adding and Removing Server to TG
*/  
           stage('Attach Server to TG'){
                 parallel{     
			                stage('Adding APOLLO 1 Removing APOLLO 2')
			                {
			                 when { expression { params.APOLLO} }
			                   steps{
			                   		
					        	    sh '''aws elbv2 register-targets --target-group-arn arn:aws:elasticloadbalancing:us-east-1:347638288157:targetgroup/ApolloTG/6d4a1efc659bc963 --targets Id=i-09af9ac9afcd3554c
								          aws elbv2 register-targets --target-group-arn arn:aws:elasticloadbalancing:us-east-1:347638288157:targetgroup/equinoxTG443/c5cb9ccbf35c210e --targets Id=i-09af9ac9afcd3554c
								          aws elbv2 register-targets --target-group-arn arn:aws:elasticloadbalancing:us-east-1:347638288157:targetgroup/DIGITALGIFTCARDMANAGERTG/a84a1f3691ab0eee --targets Id=i-09af9ac9afcd3554c
								          aws elbv2 register-targets --target-group-arn arn:aws:elasticloadbalancing:us-east-1:347638288157:targetgroup/DigitalGiftManagerTG/02c5aa89247e4c6a --targets Id=i-09af9ac9afcd3554c
								          sleep 10
									      aws elbv2 deregister-targets --target-group-arn arn:aws:elasticloadbalancing:us-east-1:347638288157:targetgroup/ApolloTG/6d4a1efc659bc963 --targets Id=i-0dd0036049996f55a
									      aws elbv2 deregister-targets --target-group-arn arn:aws:elasticloadbalancing:us-east-1:347638288157:targetgroup/equinoxTG443/c5cb9ccbf35c210e --targets Id=i-0dd0036049996f55a
									      aws elbv2 deregister-targets --target-group-arn arn:aws:elasticloadbalancing:us-east-1:347638288157:targetgroup/DIGITALGIFTCARDMANAGERTG/a84a1f3691ab0eee --targets Id=i-0dd0036049996f55a
									      aws elbv2 deregister-targets --target-group-arn arn:aws:elasticloadbalancing:us-east-1:347638288157:targetgroup/DigitalGiftManagerTG/02c5aa89247e4c6a --targets Id=i-0dd0036049996f55a'''	 
								  
								   }
			                }
			                
			                stage('Adding MARINER 1 Removing MARINER 2')
			                {
			                  when { expression { params.MARINER} }
			                   steps{
					        	    sh '''aws elbv2 register-targets --target-group-arn arn:aws:elasticloadbalancing:us-east-1:347638288157:targetgroup/MarinerELBTG/29560997cb33d2d2 --targets Id=i-0a06ca56b6263d446
								          sleep 10
									      aws elbv2 deregister-targets --target-group-arn arn:aws:elasticloadbalancing:us-east-1:347638288157:targetgroup/MarinerELBTG/29560997cb33d2d2 --targets Id=i-0202096e205e489ce'''	 
								   }
			                }
			              }
			      } 
              }  
          post {
		         success {
		                  script{
		                      buildStatus = "SUCCESS"
		                      }
					     }   
			     unstable {
				          script{
				           	  buildStatus = "UNSTABLE"
				          }
		               	}
		         failure {
			             script{
				          	    buildStatus = "FAILED"
			             }
                 	   }
              }     
        }
 
 /**
  STAGE 9. Sending Email notification to developers
 */
 if(buildStatus == "SUCCESS")
 {
    subject = "SPR ${sprNumber} SUCCESSFULLY DEPLOYED ON ${servers}";
    env.content = "SPR ${sprNumber} is successfully deployed on ${servers}. Testing on the servers is underway"
 }
 else if(buildStatus == "UNSTABLE")
 {
    subject = "SPR ${sprNumber} DEPLOYED ON ${servers} IS UNSTABLE";
	env.content = "SPR ${sprNumber} deployed on ${servers} is unstable. Please find the attachments for logs and take action accordingly"
 	attachment = true;
 } 
 else
 {
    subject = "SPR ${sprNumber} FAILED TO DEPLOY ON ${servers}";
	env.content = "SPR ${sprNumber} is unstable and failed to deploy on ${servers}. Please find the attachments for logs"
 	attachment = true;
 } 
 
 emailext attachLog: attachment, body: '${SCRIPT, template="mail-html.template"}', mimeType: 'text/html', subject: "${subject}", to: '$DEFAULT_RECIPIENTS'
 

         