/**
SMOKE PIPELINE : FILE FOR SMOKE BUILD ON DAILY BASIS

There are 10 stages involved in smoke process
STAGE 1:-  Deleting pipeline workspace
STAGE 2:-  Doing repos checkout(JAVA & PHP) in parallel stages
STAGE 3:-  Running maven build on platform (objects,platform,scheduler)
STAGE 4:-  Running maven build on services parallely
STAGE 5:-  Creating patch (Runnig maven build,php composer and code packaging)
STAGE 6:-  Deploying patch on smoke server.
STAGE 7:-  CDN Syncing assets.
STAGE 8:-  Running Db script if any. 
STAGE 9:- Sending email notification to developers

PLUGINS USED:-
sshPublisher:- To upload folder and to execute ssh script on remote server 
CVSSCM:- To checkout the code from repository server

**/
def branchname = "V_5_4"
def attachment = false;
def buildStatus = "SUCCESS";
pipeline {
    agent any
    /**
     Setting jdk for java build
    */
     tools {
       jdk "jdk14"
     }
     /**
       Params to define which codebase we want to upload 
     */
    parameters {
        booleanParam(name: "JAVA_RELEASE", defaultValue: true)
        booleanParam(name: "PHP_RELEASE", defaultValue: true)
        booleanParam(name: "EXECUTE_DB_QUERY", defaultValue: true)
        string(name: "BRANCH_NAME", defaultValue: '', description: 'Provide Branch Name')
    }
    stages {        
	/**
  	STAGE 1.Deleting Pipeline Workspace
	*/
         stage('Initiate Dev Upload'){
             steps {
             		 
             		 script {
           			      cleanWs()
                       }
                       
                     script {
           			    if (params.BRANCH_NAME == '') {
					         currentBuild.result = 'ABORTED'
					         error('Branch Name Not Defined…')
					     }else{
					          branchname = params.BRANCH_NAME
					          cleanWs()
					          currentBuild.description = params.branchname
					     }
                       }  
                       
                   }
             }    
             
                      
/**
  STAGE 2. Doing Java Repos Checkout
*/   stage('Code Checkout'){
      parallel{
         stage('Services  Checkout'){
    	   when { expression { params.JAVA_RELEASE} }
             steps {
		              withCredentials([string(credentialsId: 'CVSPATH', variable: 'CVSPATH'), string(credentialsId: 'CVSPASSWORD', variable: 'CVSPASSWORD')]) {
		              checkout changelog: true, poll: false, scm: [$class: 'CVSSCM', canUseUpdate: false, checkoutCurrentTimestamp: false, cleanOnFailedUpdate: true, disableCvsQuiet: true, forceCleanCopy: false, legacy: true, pruneEmptyDirectories: false, 
		              repositories: [[compressionLevel: -1, cvsRoot: "${CVSPATH}", excludedRegions: [[pattern: '']], password:"${CVSPASSWORD}", passwordRequired: true, 
		              repositoryItems: [[location: [$class: 'BranchRepositoryLocation', branchName: branchname, useHeadIfNotFound: false], 
		              modules: [[localName: 'eg_objects', remoteName: 'eg_objects'], 
		              [localName: 'eg_platform', remoteName: 'eg_platform'], 
		              [localName: 'scheduler_base', remoteName: 'scheduler_base'], 
		              [localName: 'eg_portal_services', remoteName: 'eg_portal_services'], 
		              [localName: 'eg_lifeline_services', remoteName: 'eg_lifeline_services'], 
		              [localName: 'eg_customer_services', remoteName: 'eg_customer_services'], 
		              [localName: 'eg_merchant_services', remoteName: 'eg_merchant_services'],
		              [localName: 'eg_scheduler_services', remoteName: 'eg_scheduler_services'],
		              [localName: 'eg_scheduler', remoteName: 'eg_scheduler']]]]]], 
		              skipChangeLog: false]
	               }
                }
            }
            stage('PHP Checkout'){
              	when { expression { params.PHP_RELEASE } }
                  steps {
		                  sh ''' 
		                   mkdir html
		                  '''
			              withCredentials([string(credentialsId: 'CVSPATH', variable: 'CVSPATH'), string(credentialsId: 'CVSPASSWORD', variable: 'CVSPASSWORD')]) {
			              checkout changelog: true, poll: false, scm: [$class: 'CVSSCM', canUseUpdate: false, checkoutCurrentTimestamp: false, cleanOnFailedUpdate: false, disableCvsQuiet: true, forceCleanCopy: false, legacy: false, pruneEmptyDirectories: false, 
			              repositories: [[compressionLevel: -1, cvsRoot: "${CVSPATH}", excludedRegions: [[pattern: '']], password:"${CVSPASSWORD}", passwordRequired: true, 
			              repositoryItems: [[location: [$class: 'BranchRepositoryLocation', branchName: branchname, useHeadIfNotFound: false], 
			              modules: [
			              [localName: 'html/eg_reseller_yii2', remoteName: 'eg_reseller_yii2'], 
			              [localName: 'html/eg_customer_yii2', remoteName: 'eg_customer_yii2'], 
			              [localName: 'html/eg_staff_yii2', remoteName: 'eg_staff_yii2'], 
			              [localName: 'html/eg_merchant_yii2', remoteName: 'eg_merchant_yii2'],
			              [localName: 'html/eg_yii2_framework_v2', remoteName: 'eg_yii2_framework_v2']]]]]], 
			              skipChangeLog: false]
                         }
                    }
                 } 
                } 
               }  
/** 
  STAGE 3.Running Maven Build on Platform (objects,platform,scheduler)
*/            
         stage('Build Platform') {
             when { expression { params.JAVA_RELEASE } }
	               steps{
	                      sh '''cd eg_objects
								mvn clean
								mvn install -U
								cd ..
								cd eg_platform
								cd platform
								mvn clean
								mvn install -U
								cd ..
								mvn clean
								mvn install -U 
								cd ..
								cd scheduler_base
								mvn clean
								mvn install -U
								cd ..
								'''
	                    } 
            }
/**
  STAGE 4.Running Maven Build on Services
*/
  		stage('Build'){
                 parallel{
                    stage('Building Portal Services'){
                      when { expression { params.JAVA_RELEASE} }
                        steps {
                          sh '''
                           cd eg_portal_services
						   mvn clean
						   mvn package
							'''
						  }
						}
				     stage('Building Customer Services'){
                      when { expression { params.JAVA_RELEASE} }
                        steps {
                          sh '''cd eg_customer_services
 								 mvn clean
								 mvn package'''
					  				
						  }
						} 
						stage('Building Lifeline Services'){
                    	   when { expression { params.JAVA_RELEASE} }
	                       steps {
	                          sh '''cd eg_lifeline_services
 								 mvn clean
								 mvn package'''
							  }
						 } 	
						 stage('Building Merchant Services'){
                    	   when { expression { params.JAVA_RELEASE} }
	                       steps {
	                          sh '''cd eg_merchant_services
 								 mvn clean
								 mvn package'''
							  }
						 }
						  stage('Building Scheduler Services'){
                    	   when { expression { params.JAVA_RELEASE} }
	                       steps {
	                           sh '''cd eg_scheduler_services
 								 mvn clean
								 mvn package'''
							  }
							 }
						  stage('Building Scheduler'){
                    	   when { expression { params.JAVA_RELEASE} }
	                       steps {
	                          sh''' cd eg_scheduler
 								 mvn clean
								 mvn package'''
							  }
						   }
                      }
                 }
              
/**
   STAGE 5.Creating Patch (Running maven build,php composer and code packaging)
 */  
       stage('Creating Services & Scheduler Patch'){
          when { expression { params.JAVA_RELEASE} }
            steps {
               sh '''
               mkdir webapps
               mkdir webapps/eg_portal_services
               mkdir webapps/eg_customer_services
               mkdir webapps/eg_merchant_services
               mkdir webapps/eg_lifeline_services
               mkdir webapps/eg_scheduler_services
               mkdir webapps/eg_scheduler
               mkdir webapps/eg_scheduler/lib
                if [ -d "eg_portal_services" ]; then
					cd eg_portal_services
					unzip -o target/eg_portal_services.war -d ../webapps/eg_portal_services
					cd ..
				fi
                if [ -d "eg_customer_services" ]; then
					cd eg_customer_services
					unzip -o target/eg_customer_services.war -d ../webapps/eg_customer_services
				    cd ..
				 fi
                 if [ -d "eg_lifeline_services" ]; then
					cd eg_lifeline_services
					unzip -o target/eg_lifeline_services.war -d ../webapps/eg_lifeline_services
					cd ..
				  fi
                  if [ -d "eg_merchant_services" ]; then
				     cd eg_merchant_services
					 unzip -o target/eg_merchant_services.war -d ../webapps/eg_merchant_services
					  cd ..
				 fi
                 if [ -d "eg_scheduler_services" ]; then
					cd eg_scheduler_services
					unzip -o target/eg_scheduler_services.war -d ../webapps/eg_scheduler_services
				    cd ..
				  fi
                  if [ -d "eg_scheduler" ]; then
					  cd eg_scheduler
					  cp -r target/lib/* ../webapps/eg_scheduler/lib
					  cd ..
					fi
				   zip -r webapps.zip webapps'''
				  }
           }
       	 stage('Creating PHP Patch'){
                when { expression { params.PHP_RELEASE} }
                steps {
                  sh '''
					cd html
					cd eg_yii2_framework_v2
					composer install
					cd ..
					cd ..
					find html -type d -name "CVS*" -print0 | xargs -0 -I {} /bin/rm -rf "{}"
					zip -r html.zip html/*
					'''
                }
           }
                 
/**
 STAGE 6. Deploying Patch on servers with the help of sshPublisher plugin
*/ 
           stage('Deploying On Server'){
                 parallel{
                    stage('JAVA'){
                      when { expression { params.JAVA_RELEASE} }
                        steps {
  				        sshPublisher(publishers: [sshPublisherDesc(configName: 'Developer', 
  				        transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', 
  				        execTimeout: 0, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, 
  				        patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', 
  				        sourceFiles: 'webapps.zip')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, 
  				        verbose: true)])
  				        
                        sshPublisher(publishers: [sshPublisherDesc(configName: 'Developer', 
                        transfers: [sshTransfer(cleanRemote: false, excludes: '', 
                        execCommand: '''cd /home/devops
						cd /var/lib/tomcat9/webapps
						sudo rm -rf  eg_lifeline_services/WEB-INF/lib/*
						sudo rm -rf  eg_merchant_services/WEB-INF/lib/*
						sudo rm -rf  eg_portal_services/WEB-INF/lib/*
						sudo rm -rf  eg_customer_services/WEB-INF/lib/*
						sudo rm -rf  eg_scheduler_services/WEB-INF/lib/*
						sudo rm -rf  eg_scheduler/lib/*
						cd /home/devops
						sudo unzip -o webapps.zip -d /var/lib/tomcat9/
						sudo rm -rf /home/devops/webapps.zip''', 
						execTimeout: 0, 
						flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', 
						remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')],
						usePromotionTimestamp: false, useWorkspaceInPromotion: false, 
						verbose: true)])
						
						 sshPublisher(publishers: [sshPublisherDesc(configName: 'Developer', 
					     transfers: [sshTransfer(cleanRemote: false, excludes: '', 
						 execCommand: '''cd /var/www/html/shfiles
						 sudo ./killSchedularProcess.sh
						 cd /opt/tomcat9/bin
						 sudo ./shutdown.sh  2>/dev/null
						 sudo sleep 5
						 sudo ./startup.sh
						 sudo sleep 10
						 cd /var/www/html/shfiles
						 sudo ./schedularProcess.sh''',
						 execTimeout: 0, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, 
						 patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, 
						 removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, 
						 verbose: true)])
					  }
                     }

                      stage('PHP'){
                        when { expression { params.PHP_RELEASE} }
	                        steps {
	                        sshPublisher(publishers: [sshPublisherDesc(configName: 'Developer', 
	                        transfers: [sshTransfer(cleanRemote: false, excludes: '', 
	                        execCommand: '', 
	                        execTimeout: 0, flatten: false, makeEmptyDirs: false, 
	                        noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', 
	                        remoteDirectorySDF: false, removePrefix: '', sourceFiles: 'html.zip')], 
	                        usePromotionTimestamp: false, useWorkspaceInPromotion: false, 
	                        verbose: true)])
	                        
	                        sshPublisher(publishers: [sshPublisherDesc(configName: 'Developer', 
	                        transfers: [sshTransfer(cleanRemote: false, excludes: '', 
	                        execCommand: '''cd /home/devops
							cd /var/www/html
							sudo rm -rf  eg_yii2_framework_v2
							cd /home/devops
							sudo unzip -o html.zip -d /var/www/
							sudo chmod -R 777 /var/www/html/eg_yii2_framework_v2/
							sudo rm -rf /home/devops/html.zip''',
							execTimeout: 0, flatten: false, makeEmptyDirs: false, 
							noDefaultExcludes: false, patternSeparator: '[, ]+', 
							remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], 
							usePromotionTimestamp: false, useWorkspaceInPromotion: false, 
							verbose: true)])
						 }
                       }
                    }
               }
           
/**
  STAGE 7.Syncing & Invalidating assets using aws CLI
*/  
            stage('CDN Sync')
		      {
		      when { expression { params.PHP_RELEASE} }
                steps {
        				sshPublisher(publishers: [sshPublisherDesc(configName: 'Developer', 
        				transfers: [sshTransfer(cleanRemote: false, excludes: '', 
        				execCommand: '''cd /home/devops
						if [ ! -d "common" ]; then
						     sudo mkdir common
						     sudo mkdir common/css
						     sudo mkdir common/js
						fi
						cd /var/www/html
						find eg_customer_yii2/components eg_merchant_yii2/components eg_staff_yii2/components eg_reseller_yii2/components -type f -name "*.css" -exec cp -n {} /home/devops/common/css/ \\;
						find eg_customer_yii2/components eg_merchant_yii2/components eg_staff_yii2/components  eg_reseller_yii2/components -type f -name "*.js" -exec cp -n {} /home/devops/common/js/ \\;
						sudo rm -rf /home/devops/common/js/awss3.js
						cd eg_yii2_framework_v2/egiftify_extensions
						sudo aws s3 cp --recursive onboarding/js/ s3://ehappify/public/js/common/
						sudo aws s3 cp --recursive onboarding/css/ s3://ehappify/public/css/common/
						sudo aws s3 cp --recursive egiftify/js/ s3://ehappify/public/js/common/
				        sudo aws s3 cp --recursive egiftify/css/ s3://ehappify/public/js/common/
						sudo aws s3 cp --recursive payment/js/ s3://ehappify/public/js/common/
						sudo aws s3 cp --recursive payment/css/ s3://ehappify/public/css/common/
						sudo aws s3 cp --recursive commonAssets/js/ s3://ehappify/public/js/common/
						sudo aws s3 cp --recursive commonAssets/css/ s3://ehappify/public/css/common/
						sudo aws s3 cp --recursive payment/images/ s3://ehappify/public/images/common/
						sudo aws s3 cp --recursive onboarding/images/ s3://ehappify/public/images/common/
						cd /var/www/html
						sudo aws s3 cp --recursive eg_customer_yii2/js/ s3://ehappify/public/js/marketplace/
						sudo aws s3 cp --recursive eg_staff_yii2/js/ s3://ehappify/public/js/staff/
						sudo aws s3 cp --recursive eg_reseller_yii2/js/ s3://ehappify/public/js/reseller/
						sudo aws s3 cp --recursive eg_merchant_yii2/js/ s3://ehappify/public/js/merchant/
						sudo aws s3 cp --recursive /home/devops/common/js/ s3://ehappify/public/js/common/
						sudo aws s3 cp --recursive eg_customer_yii2/css/ s3://ehappify/public/css/marketplace/
						sudo aws s3 cp --recursive eg_staff_yii2/css/ s3://ehappify/public/css/staff/
						sudo aws s3 cp --recursive eg_reseller_yii2/css/ s3://ehappify/public/css/reseller/
						sudo aws s3 cp --recursive eg_merchant_yii2/css/ s3://ehappify/public/css/merchant/
						sudo aws s3 cp --recursive /home/devops/common/css/ s3://ehappify/public/css/common/
						sudo aws s3 cp --recursive eg_customer_yii2/images/ s3://ehappify/public/images/marketplace/
						sudo aws s3 cp --recursive eg_staff_yii2/images/ s3://ehappify/public/images/staff/
						sudo aws s3 cp --recursive eg_reseller_yii2/images/ s3://ehappify/public/images/reseller/
						sudo aws s3 cp --recursive eg_merchant_yii2/images/ s3://ehappify/public/images/merchant/
						sudo aws cloudfront create-invalidation --distribution-id E241OIK9E2TME6 --paths "/js/*" "/css/*" "/images/*"
						sudo rm -rf /home/devops/common/css/*
						sudo rm -rf /home/devops/common/js/*''',  
						execTimeout: 0, flatten: false, 
						makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', 
						remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], 
						usePromotionTimestamp: false, useWorkspaceInPromotion: false, 
						verbose: true)])
					}
			  }
/**
 STAGE 8. Running DbScript
*/ 
   stage('Running DbScript'){
     when { expression { params.EXECUTE_DB_QUERY && params.JAVA_RELEASE } }
					steps{
					    script{
							   String date = new Date().format('d_MMM_y').toLowerCase();
							   String target_dir = "eg_objects/database/${branchname}/upg_${date}.sql".toLowerCase();
							   res = sh(script: "test -f ${target_dir} && echo '1' || echo '0' ", returnStdout: true).trim()
							   if(res=='1')
							   {
								 sh""" mkdir database
								  cp ${target_dir} database/
								  zip -r database-${BUILD_NUMBER}.zip database
								  """;
		                          sshPublisher(publishers: [sshPublisherDesc(configName: 'Developer', 
		                          transfers: [sshTransfer(cleanRemote: false, excludes: '', 
		                          execCommand: '', execTimeout: 0, flatten: false, makeEmptyDirs: false, 
		                          noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', 
		                          remoteDirectorySDF: false, removePrefix: '', 
		                          sourceFiles: "database-${BUILD_NUMBER}.zip")], 
		                          usePromotionTimestamp: false, useWorkspaceInPromotion: false, 
		                          verbose: true)])
			                     
			                      sshPublisher(publishers: [sshPublisherDesc(configName: 'Developer', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '''cd /home/devops
								  unzip database-${BUILD_NUMBER}.zip -d /home/devops
								  chmod -R 775 database
								  cd /var/www/html/shfiles
								  ./executeQuery.sh
								  cd /home/devops
								  rm -rf database-${BUILD_NUMBER}.zip''', 
								  execTimeout: 180000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, 
								  patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false,
								  removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, 
								  useWorkspaceInPromotion: false, verbose: true)])
								  }
							   else
							    echo "No db script found"
							}    
					}
		      } 
         
          }  
            post {
		         success {
		                  script{
		                      buildStatus = "SUCCESS"
		                      }
					     }   
			     unstable {
				          script{
				           	  buildStatus = "UNSTABLE"
				          }
		               	}
		         failure {
			             script{
				          	  buildStatus = "FAILED"
			             }
                 	   }
              }    
       }
 

         