/**
Point to rember : use JDK 17 For building the java and spring projects for version V_6_1
GITURL is present in environments
STAGE 1:-  Deleting pipeline workspace
STAGE 2:- Doing J  Checkout (JAVA , PHP)
STAGE 3:-  Doing Java Repos Checkout From Git (SPRING)
STAGE 4.Running Maven Build on Services cloned from git
STAGE 5.Running Maven Build on Platform (objects,platform,scheduler)
STAGE 6.Running Maven Build on Services
STAGE 7.Creating Patch (Running maven build,php composer and code packaging)
STAGE 8.Deploying On Server
STAGE 9.Syncing & Invalidating assets using aws CLI
STAGE 10. Running DbScript
STAGE 11. Sending Email notification to developers
PLUGINS USED:-
CVSSCM:- To checkout the code from CVS repository server
GITSCM:- To checkout the code from GIT repository server
**/
def branchname = 'V_6_1'
def gitbranch = '6.1.0'
def buildStatus = true
def attachment = false
// common jars
def springcommonRepos = [
    'global_meta',
    'jersey_object_library'
]
def springplatformRepos = [
    'sp_dynamo_document',
    'sp_mysql_application_entity',
    'object_library',
    'processing_system'

]
pipeline {
    agent any

    tools {
        jdk 'jdk17'
        jdk 'jdk14'
        nodejs 'nodejs14'
    }
    parameters {
        booleanParam(name: 'JAVA_RELEASE', defaultValue: true)
        booleanParam(name: 'PHP_RELEASE', defaultValue: true)
        booleanParam(name: 'OPS_RELEASE', defaultValue: false)
        string(name: 'DB_FILE_PATH', defaultValue: '', description: 'Provide db file path if any')
    }
    stages {
/**
  STAGE 1.Deleting Pipeline Workspace
*/
        stage('Preparing For Upload By Cleaning Wokrspace') {
            steps {
                script
                {
                    cleanWs()
                }
            }
        }

/**
  STAGE 2. Doing Java Repos from git and cvs  Checkout
*/
        stage('Code Checkout for Java And Php ') {
            parallel {
                stage('Services  Checkout JAVA RELEASE') {
                    when { expression { params.JAVA_RELEASE } }
                    steps {
                        withCredentials([string(credentialsId: 'CVSPATH', variable: 'CVSPATH'), string(credentialsId: 'CVSPASSWORD', variable: 'CVSPASSWORD')]) {
                            checkout changelog: true, poll: false, scm: [$class: 'CVSSCM', canUseUpdate: false, checkoutCurrentTimestamp: false, cleanOnFailedUpdate: false, disableCvsQuiet: true, forceCleanCopy: false, legacy: true, pruneEmptyDirectories: false,
                      repositories: [[compressionLevel: -1, cvsRoot: "${CVSPATH}", excludedRegions: [[pattern: '']], password:"${CVSPASSWORD}", passwordRequired: true,
                      repositoryItems: [[location: [$class: 'BranchRepositoryLocation', branchName: "${branchname}", useHeadIfNotFound: false],
                      modules: [[localName: 'eg_objects', remoteName: 'eg_objects'],
                      [localName: 'eg_platform', remoteName: 'eg_platform'],
                      [localName: 'scheduler_base', remoteName: 'scheduler_base'],
                      [localName: 'eg_portal_services', remoteName: 'eg_portal_services'],
                      [localName: 'eg_lifeline_services', remoteName: 'eg_lifeline_services'],
                      [localName: 'eg_customer_services', remoteName: 'eg_customer_services'],
                      [localName: 'eg_merchant_services', remoteName: 'eg_merchant_services'],
                      [localName: 'eg_scheduler_services', remoteName: 'eg_scheduler_services'],
                      [localName: 'eg_scheduler', remoteName: 'eg_scheduler']]]]]],
                      skipChangeLog: false]
                        }
                    }
                }
                stage('PHP Checkout') {
                    when { expression { params.PHP_RELEASE } }
                    steps {
                        sh '''
                           mkdir html
                          '''
                        withCredentials([string(credentialsId: 'CVSPATH', variable: 'CVSPATH'), string(credentialsId: 'CVSPASSWORD', variable: 'CVSPASSWORD')]) {
                            checkout changelog: true, poll: false, scm: [$class: 'CVSSCM', canUseUpdate: false, checkoutCurrentTimestamp: false, cleanOnFailedUpdate: false, disableCvsQuiet: true, forceCleanCopy: false, legacy: false, pruneEmptyDirectories: false,
                          repositories: [[compressionLevel: -1, cvsRoot: "${CVSPATH}", excludedRegions: [[pattern: '']], password:"${CVSPASSWORD}", passwordRequired: true,
                          repositoryItems: [[location: [$class: 'BranchRepositoryLocation', branchName: "${branchname}", useHeadIfNotFound: false],
                          modules: [
                          [localName: 'html/eg_reseller_yii2', remoteName: 'eg_reseller_yii2'],
                          [localName: 'html/eg_customer_yii2', remoteName: 'eg_customer_yii2'],
                          [localName: 'html/eg_staff_yii2', remoteName: 'eg_staff_yii2'],
                          [localName: 'html/eg_merchant_yii2', remoteName: 'eg_merchant_yii2'],
                          [localName: 'html/eg_yii2_framework_v2', remoteName: 'eg_yii2_framework_v2'],
                          [localName: 'html/eg_customer_ang_v1', remoteName: 'eg_customer_ang_v1']]]]]],
                          skipChangeLog: false]
                        }
                    }
                }
            }
        }

/**
  STAGE 3. Doing Java Repos Checkout From Git
*/
        stage('Common Spring Repos Checkout') {
            parallel {
                stage('Common Repos Checkout (Git)') {
                    when { expression { params.JAVA_RELEASE } }
                    steps {
                        script {
                            withCredentials([string(credentialsId: 'GITURL', variable: 'GITURL')]) {
                                springcommonRepos.each { repo ->
                                    dir(repo) {
                                        checkout([
                                            $class: 'GitSCM',
                                            branches: [[name: "${gitbranch}"]],
                                            userRemoteConfigs: [[url: "${GITURL}/${repo}.git"]]]
                                        )
                                    }
                                }
                            }
                        }
                    }
                }
                stage('platform') {
                    when { expression { params.OPS_RELEASE } }
                    steps {
                            script {
                            withCredentials([string(credentialsId: 'GITURL', variable: 'GITURL')]) {
                                springplatformRepos.each { repo ->
                                    dir(repo) {
                                        checkout([
                                        $class: 'GitSCM',
                                        branches: [[name: "${gitbranch}"]],
                                        userRemoteConfigs: [[url: "${GITURL}/${repo}.git"]]
                                    ])
                                    }
                                }
                            }
                            }
                    }
                }
            }
        }

/**
  STAGE 4.Running Maven Build on Services and Platform cloned from git
*/
        stage('Build Spring Repos') {
            parallel {
                stage('Building Common Jars') {
                    when { expression { params.JAVA_RELEASE } }

                    steps {
                        script {
                            def javaHome = '/usr/lib/jvm/java-17-amazon-corretto'
                            def mavenCommands = [
                            'mvn clean install'

                             ]

                            springcommonRepos.each { repo1 ->
                                dir(repo1) {
                                    // Replace artifact.egiftify-dev.com with 54.205.166.118 in pom.xml
                                    sh '''
                                    find . -name "pom.xml" -exec sed -i 's/artifact.egiftify-dev.com/54.205.166.118/g' {} +
                                     '''

                                    // Execute Maven commands
                                    mavenCommands.each { command ->
                                        sh """
                                        export JAVA_HOME=${javaHome}
                                        export PATH=\$JAVA_HOME/bin:\$PATH
                                        ${command}
                                        """
                                    }
                                }
                            }
                        }
                    }
                }
                stage('Building springplatformRepos') {
                    when { expression { params.OPS_RELEASE } }

                    steps {
                        script {
                            def javaHome = '/usr/lib/jvm/java-17-amazon-corretto'
                            def mavenCommands = [
                                'mvn clean install'
                            ]

                            springplatformRepos.each { repo1 ->
                                dir(repo1) {
                                    // Replace artifact.egiftify-dev.com with 54.205.166.118 in pom.xml
                                    sh '''
                                    find . -name "pom.xml" -exec sed -i 's/artifact.egiftify-dev.com/54.205.166.118/g' {} +
                                    '''

                                    // Execute Maven commands
                                    mavenCommands.each { command ->
                                        sh """
                                        export JAVA_HOME=${javaHome}
                                        export PATH=\$JAVA_HOME/bin:\$PATH
                                        ${command}
                                        """
                                    }
                                }
                            }
                        }

                        // Create a ZIP file containing ops.jar in the base directory
                       sh '''
                        echo '#!/bin/bash' > processing_system/target/run_ops.sh
                        echo 'cd $(dirname $0)' >> processing_system/target/run_ops.sh
                        echo 'nohup java -jar ops.jar &' >> processing_system/target/run_ops.sh
                        chmod +x processing_system/target/run_ops.sh
                        '''

                        sh '''
                        cd processing_system/target
                        zip ../../processingsystem.zip ops.jar run_ops.sh
                        '''

                        // Check if the zip file exists
                        sh 'ls -l '



                    }
                }


            }
        }
/**
   STAGE 5.Running Maven Build on Platform (objects,platform,scheduler)
*/

        stage('Build CVS Platform') {
            when {
                expression { params.JAVA_RELEASE }
            }
            steps {
                script {
                    def buildSteps = [
                        ['name': 'eg_objects', 'path': 'eg_objects'],
                        ['name': 'eg_platform/platform', 'path': 'eg_platform/platform'],
                        ['name': 'eg_platform', 'path': 'eg_platform'],
                        ['name': 'scheduler_base', 'path': 'scheduler_base']
                    ]
                    buildSteps.each { step ->
                        dir(step.path) {
                            sh 'mvn clean'
                            sh 'mvn install -U'
                        }
                    }
                }
            }
        }

/**
  STAGE 6.Running Maven Build on Services and Running Node build in angular services
*/

        stage('Build CVS Services') {
            when {
                expression { params.JAVA_RELEASE }
            }
            steps {
                script {
                    if (params.JAVA_RELEASE) {
                        // Build each service sequentially
                        dir('eg_portal_services') {
                            sh 'mvn clean package'
                        }
                        dir('eg_customer_services') {
                            sh 'mvn clean package'
                        }
                        dir('eg_lifeline_services') {
                            sh 'mvn clean package'
                        }
                        dir('eg_merchant_services') {
                            sh 'mvn clean package'
                        }
                        dir('eg_scheduler_services') {
                            sh 'mvn clean package'
                        }
                        dir('eg_scheduler') {
                            sh 'mvn clean package'
                        }
                    }
                }
            }
        }
        stage('Build Angular Services') {
                    when {
                        expression { params.PHP_RELEASE }
                    }
                    steps {
                        script {
                            withEnv(["PATH+NODE=${tool name: 'nodejs14'}/bin"]) {
                                sh '''
                                    cd html/eg_customer_ang_v1
                                    # Install project dependencies
                                        npm install

                                    # Build the project
                                        ng build --configuration=production --output-path=dist/customer --base-href /customer/ --deploy-url /customer/
                                        ng build --configuration=production --output-path=dist/wallet --base-href /wallet/ --deploy-url /wallet/
                                   '''
                            }
                        }
                    }
        }

/**
   STAGE 7.Creating Patch (Running maven build,php composer and code packaging)
*/
        stage('Creating Services & Scheduler Patch') {
            when { expression { params.JAVA_RELEASE } }
            steps {
                sh '''
               mkdir webapps
               mkdir webapps/eg_portal_services
               mkdir webapps/eg_customer_services
               mkdir webapps/eg_merchant_services
               mkdir webapps/eg_lifeline_services
               mkdir webapps/eg_scheduler_services
               mkdir webapps/eg_scheduler
               mkdir webapps/eg_scheduler/lib
                if [ -d "eg_portal_services" ]; then
                    cd eg_portal_services
                    unzip -o target/eg_portal_services.war -d ../webapps/eg_portal_services
                    cd ..
                fi
                if [ -d "eg_customer_services" ]; then
                    cd eg_customer_services
                    unzip -o target/eg_customer_services.war -d ../webapps/eg_customer_services
                    cd ..
                 fi
                 if [ -d "eg_lifeline_services" ]; then
                    cd eg_lifeline_services
                    unzip -o target/eg_lifeline_services.war -d ../webapps/eg_lifeline_services
                    cd ..
                  fi
                  if [ -d "eg_merchant_services" ]; then
                     cd eg_merchant_services
                     unzip -o target/eg_merchant_services.war -d ../webapps/eg_merchant_services
                      cd ..
                 fi
                 if [ -d "eg_scheduler_services" ]; then
                    cd eg_scheduler_services
                    unzip -o target/eg_scheduler_services.war -d ../webapps/eg_scheduler_services
                    cd ..
                  fi
                  if [ -d "eg_scheduler" ]; then
                      cd eg_scheduler
                      cp -r target/lib/* ../webapps/eg_scheduler/lib
                      cd ..
                    fi
                   zip -r webapps.zip webapps'''
            }
        }

        stage('Creating PHP Patch') {
                when { expression { params.PHP_RELEASE } }
                steps {
                sh '''
                    cd html
                    cd eg_yii2_framework_v2
                    composer install
                    cd ..
                    cd ..
                    find html -type d -name "CVS*" -print0 | xargs -0 -I {} /bin/rm -rf "{}"
                    zip -r html.zip html/*
                    '''
                }
        }
 /** stage 8 :  Deploying On Server
 */
        stage('Deploying On Server') {
            parallel {
                    stage('JAVA') {
                    when { expression { params.JAVA_RELEASE } }
                        steps {
                        sshPublisher(publishers: [sshPublisherDesc(configName: 'TEST_SERVER',
                          transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '',
                          execTimeout: 0, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false,
                          patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '',
                          sourceFiles: 'webapps.zip')], usePromotionTimestamp: false, useWorkspaceInPromotion: false,
                          verbose: true)])

                        sshPublisher(publishers: [sshPublisherDesc(configName: 'TEST_SERVER',
                        transfers: [sshTransfer(cleanRemote: false, excludes: '',
                        execCommand: '''
                        sudo cd /var/lib/tomcat9/webapps
                        sudo rm -rf  eg_lifeline_services/WEB-INF/lib/
                        sudo rm -rf  eg_merchant_services/WEB-INF/lib/
                        sudo rm -rf  eg_portal_services/WEB-INF/lib/
                        sudo rm -rf  eg_customer_services/WEB-INF/lib/
                        sudo rm -rf  eg_scheduler_services/WEB-INF/lib/
                        sudo rm -rf  eg_scheduler/lib/
                        cd /home/devops
                        sudo unzip -o webapps.zip -d /var/lib/tomcat9/
                        sudo rm -rf /home/devops/webapps.zip
                         cd /var/www/html/shfiles
                         sudo ./killSchedularProcess.sh
                         sudo kill -9 $(ps aux | grep '/opt/tomcat9' | grep -v grep | awk '{print $2}')
                         cd /opt/tomcat9/bin
                         sudo ./startup.sh
                         sudo sleep 10
                         cd /var/www/html/shfiles
                         sudo ./schedularProcess.sh
                        
                        
                        ''',
                        execTimeout: 0,
                        flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+',
                        remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')],
                        usePromotionTimestamp: false, useWorkspaceInPromotion: false,
                        verbose: true)])

                        // sshPublisher(publishers: [sshPublisherDesc(configName: 'TEST_SERVER',
                        //  transfers: [sshTransfer(cleanRemote: false, excludes: '',
                        //  execCommand: '''
                        //  cd /var/www/html/shfiles
                        //  sudo ./killSchedularProcess.sh
                        //  sudo kill -9 $(ps aux | grep '/opt/tomcat9' | grep -v grep | awk '{print $2}')
                        //  cd /opt/tomcat9/bin
                        //  sudo ./startup.sh
                        //  sudo sleep 10
                        //  cd /var/www/html/shfiles
                        //  sudo ./schedularProcess.sh
                        //  ''',

                        //  execTimeout: 0, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false,
                        //  patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false,
                        //  removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, useWorkspaceInPromotion: false,
                        //  verbose: true)])
                        }
                    }

                stage('PHP') {
                        when { expression { params.PHP_RELEASE } }
                            steps {
                            sshPublisher(publishers: [sshPublisherDesc(configName: 'TEST_SERVER',
                            transfers: [sshTransfer(cleanRemote: false, excludes: '',
                            execCommand: '',
                            execTimeout: 0, flatten: false, makeEmptyDirs: false,
                            noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '',
                            remoteDirectorySDF: false, removePrefix: '', sourceFiles: 'html.zip')],
                            usePromotionTimestamp: false, useWorkspaceInPromotion: false,
                            verbose: true)])

                            sshPublisher(publishers: [sshPublisherDesc(configName: 'TEST_SERVER',
                            transfers: [sshTransfer(cleanRemote: false, excludes: '',
                            execCommand: '''cd /home/devops
                            cd /var/www/html
                            sudo rm -rf  eg_yii2_framework_v2
                            cd /home/devops
                            sudo unzip -o html.zip -d /var/www/
                            sudo chmod -R 777 /var/www/html/eg_yii2_framework_v2/
                            sudo rm -rf /home/devops/html.zip''',
                            execTimeout: 0, flatten: false, makeEmptyDirs: false,
                            noDefaultExcludes: false, patternSeparator: '[, ]+',
                            remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')],
                            usePromotionTimestamp: false, useWorkspaceInPromotion: false,
                            verbose: true)])
                            }
                }

                stage('OPS') {
                   when { expression { params.OPS_RELEASE } }
                            steps {
                                sshPublisher(publishers: [sshPublisherDesc(configName: 'TEST_SERVER',
                                transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '',
                                execTimeout: 0, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false,
                                patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '',
                                sourceFiles: 'processingsystem.zip')], usePromotionTimestamp: false, useWorkspaceInPromotion: false,
                                verbose: true)])

                                sshPublisher(publishers: [sshPublisherDesc(configName: 'TEST_SERVER',
                                transfers: [sshTransfer(cleanRemote: false, excludes: '',
                                execCommand: '''
                                cd /home/devops
                                sudo unzip processingsystem.zip -d /home/devops
                                cd processingsystem
                                sudo ./run_ops.sh
                                sudo sleep 10                                                     
                                ''',
                                execTimeout: 0,
                                flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+',
                                remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')],
                                usePromotionTimestamp: false, useWorkspaceInPromotion: false,
                                verbose: true)])

                              
                        }
                }


            }
        }
/**
STAGE 9.Syncing & Invalidating assets using aws CLI
*/
        
/**
 STAGE 10. Running DbScript
*/
        stage('Running DbScript') {
            when { expression { params.EXECUTE_DB_QUERY && params.JAVA_RELEASE } }
                    steps {
                        script {
                    String date = new Date().format('d_MMM_y').toLowerCase()
                    String target_dir = "eg_objects/database/${branchname}/upg_${date}.sql".toLowerCase()
                    res = sh(script: "test -f ${target_dir} && echo '1' || echo '0' ", returnStdout: true).trim()
                    if (res == '1') {
                        sh""" mkdir database
                                  cp ${target_dir} database/
                                  zip -r database-${BUILD_NUMBER}.zip database
                                  """
                        sshPublisher(publishers: [sshPublisherDesc(configName: 'TEST_SERVER',
                                  transfers: [sshTransfer(cleanRemote: false, excludes: '',
                                  execCommand: '', execTimeout: 0, flatten: false, makeEmptyDirs: false,
                                  noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '',
                                  remoteDirectorySDF: false, removePrefix: '',
                                  sourceFiles: "database-${BUILD_NUMBER}.zip")],
                                  usePromotionTimestamp: false, useWorkspaceInPromotion: false,
                                  verbose: true)])

                        sshPublisher(publishers: [sshPublisherDesc(configName: 'TEST_SERVER', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '''cd /home/devops
                                  unzip database-${BUILD_NUMBER}.zip -d /home/devops
                                  chmod -R 775 database
                                  cd /var/www/html/shfiles
                                  ./executeQuery.sh
                                  cd /home/devops
                                  rm -rf database-${BUILD_NUMBER}.zip''',
                                  execTimeout: 180000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false,
                                  patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false,
                                  removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false,
                                  useWorkspaceInPromotion: false, verbose: true)])
                    }
                               else {
                                echo 'No db script found'
                               }
                        }
                    }
        }
    }
    post {
        success {
            script {
                buildStatus = 'SUCCESS'
            }
        }
        unstable {
            script {
                buildStatus = 'UNSTABLE'
            }
        }
        failure {
            script {
                buildStatus = false
            }
        }
    }
}
if (buildStatus == 'SUCCESS') {
    subject = "RC_3_BUILD_#${BUILD_NUMBER} FOR SPR ${branchname} SUCCESSFULLY DEPLOYED ON TEST_SERVER"
    env.content = "RC_3_BUILD_#${BUILD_NUMBER} for SPR ${branchname} with latest checked-in changes is successfully deployed to the TEST_SERVER server. Please verify your changes."
}
 else if (buildStatus == 'UNSTABLE') {
    subject = "RC_3_BUILD_#${BUILD_NUMBER} FOR SPR ${branchname} DEPLOYED ON TEST_SERVER IS UNSTABLE"
    env.content = "RC_3_BUILD_#${BUILD_NUMBER} for SPR ${branchname}  deployed on TEST_SERVER server with latest checked-in changes is unstable. Please find the attachments for logs and take action accordingly"
    attachment = true
 }
 else
 {
    subject = "RC_3_BUILD_#${BUILD_NUMBER} FOR SPR ${branchname} FAILED TO DEPLOY ON TEST_SERVER"
    env.content = "RC_3_BUILD_#${BUILD_NUMBER} for SPR ${branchname} with latest checked-in changes is failed to deploy on the TEST_SERVER server. Please find the attachments for logs"
    attachment = true
 }
 emailext attachLog: attachment, body: '${SCRIPT, template="mail-html.template"}', mimeType: 'text/html', subject: "${subject}", to: 'sidharth.guleira@iqbsys.com'
