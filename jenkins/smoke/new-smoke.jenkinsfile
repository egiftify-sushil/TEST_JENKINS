/**
Point to rember : use JDK 17 For building the java and spring projects for version V_6_1
GITURL is present in environments
STAGE 1:-  Deleting pipeline workspace
STAGE 2:- Doing J  Checkout (JAVA , PHP)
STAGE 3:-  Doing Java Repos Checkout From Git (SPRING)
STAGE 4.Running Maven Build on Services cloned from git
STAGE 5.Running Maven Build on Platform (objects,platform,scheduler)
STAGE 6.Running Maven Build on Services
STAGE 7.Creating Patch (Running maven build,php composer and code packaging)
STAGE 8.Deploying On Server
STAGE 9.Syncing & Invalidating assets using aws CLI
STAGE 10. Running DbScript
STAGE 11. Sending Email notification to developers
PLUGINS USED:-
CVSSCM:- To checkout the code from CVS repository server
GITSCM:- To checkout the code from GIT repository server
**/
def branchname = 'V_6_1'
def gitbranch = '6.1.0'
def buildStatus = true
def attachment = false
// common jars
def repos = [

    'global_meta',
    'jersey_object_library'
    
]
def springplatformRepos = [
    'sp_dynamo_document',
    'sp_mysql_application_entity',
    'object_library',
    'processing_system'

]
pipeline {
    agent any
   
    tools {
        jdk 'jdk17'
        jdk 'jdk14'
        nodejs 'nodejs14'
    }
    parameters {
        booleanParam(name: 'JAVA_RELEASE', defaultValue: true)
        booleanParam(name: 'PHP_RELEASE', defaultValue: true)
        booleanParam(name: 'OPS_RELEASE', defaultValue: true)
        string(name: 'DB_FILE_PATH', defaultValue: '', description: 'Provide db file path if any')
    }
    stages {
/**
  STAGE 1.Deleting Pipeline Workspace
*/
        stage('Preparing For Upload By Cleaning Wokrspace') {
            steps {
                script
                {
                    cleanWs()
                }
            }
        }

/**
  STAGE 2. Doing Java Repos from git and cvs  Checkout
*/
        stage('Code Checkout for Java And Php ') {
            parallel {
                stage('Services  Checkout JAVA RELEASE') {
                    when { expression { params.JAVA_RELEASE } }
                    steps {
                        withCredentials([string(credentialsId: 'CVSPATH', variable: 'CVSPATH'), string(credentialsId: 'CVSPASSWORD', variable: 'CVSPASSWORD')]) {
                            checkout changelog: true, poll: false, scm: [$class: 'CVSSCM', canUseUpdate: false, checkoutCurrentTimestamp: false, cleanOnFailedUpdate: false, disableCvsQuiet: true, forceCleanCopy: false, legacy: true, pruneEmptyDirectories: false,
                      repositories: [[compressionLevel: -1, cvsRoot: "${CVSPATH}", excludedRegions: [[pattern: '']], password:"${CVSPASSWORD}", passwordRequired: true,
                      repositoryItems: [[location: [$class: 'BranchRepositoryLocation', branchName: "${branchname}", useHeadIfNotFound: false],
                      modules: [[localName: 'eg_objects', remoteName: 'eg_objects'],
                      [localName: 'eg_platform', remoteName: 'eg_platform'],
                      [localName: 'scheduler_base', remoteName: 'scheduler_base'],
                      [localName: 'eg_portal_services', remoteName: 'eg_portal_services'],
                      [localName: 'eg_lifeline_services', remoteName: 'eg_lifeline_services'],
                      [localName: 'eg_customer_services', remoteName: 'eg_customer_services'],
                      [localName: 'eg_merchant_services', remoteName: 'eg_merchant_services'],
                      [localName: 'eg_scheduler_services', remoteName: 'eg_scheduler_services'],
                      [localName: 'eg_scheduler', remoteName: 'eg_scheduler']]]]]],
                      skipChangeLog: false]
                        }
                    }
                }
                stage('PHP Checkout') {
                    when { expression { params.PHP_RELEASE } }
                    steps {
                        sh '''
                           mkdir html
                          '''
                        withCredentials([string(credentialsId: 'CVSPATH', variable: 'CVSPATH'), string(credentialsId: 'CVSPASSWORD', variable: 'CVSPASSWORD')]) {
                            checkout changelog: true, poll: false, scm: [$class: 'CVSSCM', canUseUpdate: false, checkoutCurrentTimestamp: false, cleanOnFailedUpdate: false, disableCvsQuiet: true, forceCleanCopy: false, legacy: false, pruneEmptyDirectories: false,
                          repositories: [[compressionLevel: -1, cvsRoot: "${CVSPATH}", excludedRegions: [[pattern: '']], password:"${CVSPASSWORD}", passwordRequired: true,
                          repositoryItems: [[location: [$class: 'BranchRepositoryLocation', branchName: "${branchname}", useHeadIfNotFound: false],
                          modules: [
                          [localName: 'html/eg_reseller_yii2', remoteName: 'eg_reseller_yii2'],
                          [localName: 'html/eg_customer_yii2', remoteName: 'eg_customer_yii2'],
                          [localName: 'html/eg_staff_yii2', remoteName: 'eg_staff_yii2'],
                          [localName: 'html/eg_merchant_yii2', remoteName: 'eg_merchant_yii2'],
                          [localName: 'html/eg_yii2_framework_v2', remoteName: 'eg_yii2_framework_v2'],
                          ]]]]],
                          skipChangeLog: false]
                        }
                    }
                }
            }
        }

/**
  STAGE 3. Doing Java Repos Checkout From Git
*/
 stage('Common Spring Repos Checkout') {
            parallel {
         stage('platform') {
            when { expression { params.OPS_RELEASE } }
            steps {
                       echo("${GitUrl}");
                    }
                }
        stage('Common Repos Checkout (Git)') {
            when {
                expression { params.JAVA_RELEASE }
            }
            steps {
                script {
                //    echo the creds from global
                    echo("${GitUrl}");
                }
            }
        }
            }
 }
            

/**
  STAGE 4.Running Maven Build on Services and Platform cloned from git
*/
 

/**
   STAGE 5.Running Maven Build on Platform (objects,platform,scheduler)
*/

    

/**
  STAGE 6.Running Maven Build on Services and Running Node build in angular services
*/

       
      
/**
   STAGE 7.Creating Patch (Running maven build,php composer and code packaging)
*/
       
 /** stage 8 :  Deploying On Server
 */
      
/**
STAGE 9.Syncing & Invalidating assets using aws CLI
*/
// stage('CDN Sync')
//   {
// when { expression { params.PHP_RELEASE } }
//     steps {
//             sshPublisher(publishers: [sshPublisherDesc(configName: 'TEST_SERVER',
//             transfers: [sshTransfer(cleanRemote: false, excludes: '',
//             execCommand: '''cd /home/devops
//             if [ ! -d "common" ]; then
//                  sudo mkdir common
//                  sudo mkdir common/css
//                  sudo mkdir common/js
//             fi
//             cd /var/www/html
//             find eg_customer_yii2/components eg_merchant_yii2/components eg_staff_yii2/components eg_reseller_yii2/components -type f -name "*.css" -exec cp -n {} /home/devops/common/css/ \\;
//             find eg_customer_yii2/components eg_merchant_yii2/components eg_staff_yii2/components  eg_reseller_yii2/components -type f -name "*.js" -exec cp -n {} /home/devops/common/js/ \\;
//             sudo rm -rf /home/devops/common/js/awss3.js
//             cd eg_yii2_framework_v2/egiftify_extensions
//             sudo aws s3 cp --recursive onboarding/js/ s3://eatwallet/public/js/common/
//             sudo aws s3 cp --recursive onboarding/css/ s3://eatwallet/public/css/common/
//             sudo aws s3 cp --recursive egiftify/js/ s3://eatwallet/public/js/common/
//             sudo aws s3 cp --recursive egiftify/css/ s3://eatwallet/public/css/common/
//             sudo aws s3 cp --recursive payment/js/ s3://eatwallet/public/js/common/
//             sudo aws s3 cp --recursive payment/css/ s3://eatwallet/public/css/common/
//             sudo aws s3 cp --recursive commonAssets/js/ s3://eatwallet/public/js/common/
//             sudo aws s3 cp --recursive commonAssets/css/ s3://eatwallet/public/css/common/
//             sudo aws s3 cp --recursive payment/images/ s3://eatwallet/public/images/common/
//             sudo aws s3 cp --recursive onboarding/images/ s3://eatwallet/public/images/common/
//             cd /var/www/html
//             sudo aws s3 cp --recursive eg_customer_yii2/js/ s3://eatwallet/public/js/marketplace/
//             sudo aws s3 cp --recursive eg_staff_yii2/js/ s3://eatwallet/public/js/staff/
//             sudo aws s3 cp --recursive eg_reseller_yii2/js/ s3://eatwallet/public/js/reseller/
//             sudo aws s3 cp --recursive eg_merchant_yii2/js/ s3://eatwallet/public/js/merchant/
//             sudo aws s3 cp --recursive /home/devops/common/js/ s3://eatwallet/public/js/common/
//             sudo aws s3 cp --recursive eg_customer_yii2/css/ s3://eatwallet/public/css/marketplace/
//             sudo aws s3 cp --recursive eg_staff_yii2/css/ s3://eatwallet/public/css/staff/
//             sudo aws s3 cp --recursive eg_reseller_yii2/css/ s3://eatwallet/public/css/reseller/
//             sudo aws s3 cp --recursive eg_merchant_yii2/css/ s3://eatwallet/public/css/merchant/
//             sudo aws s3 cp --recursive /home/devops/common/css/ s3://eatwallet/public/css/common/
//             sudo aws s3 cp --recursive eg_customer_yii2/images/ s3://eatwallet/public/images/marketplace/
//             sudo aws s3 cp --recursive eg_staff_yii2/images/ s3://eatwallet/public/images/staff/
//             sudo aws s3 cp --recursive eg_reseller_yii2/images/ s3://eatwallet/public/images/reseller/
//             sudo aws s3 cp --recursive eg_merchant_yii2/images/ s3://eatwallet/public/images/merchant/
//             sudo aws cloudfront create-invalidation --distribution-id E2VIUIU0A8LO3Z --paths "/js/*" "/css/*" "/images/*"
//             sudo rm -rf /home/devops/common/css/*
//             sudo rm -rf /home/devops/common/js/*''',
//             execTimeout: 0, flatten: false,
//             makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+',
//             remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')],
//             usePromotionTimestamp: false, useWorkspaceInPromotion: false,
//             verbose: true)])
//     }
//   }
/**
 STAGE 10. Running DbScript
*/
        stage('Running DbScript') {
            when { expression { params.EXECUTE_DB_QUERY && params.JAVA_RELEASE } }
                    steps {
                        script {
                    String date = new Date().format('d_MMM_y').toLowerCase()
                    String target_dir = "eg_objects/database/${branchname}/upg_${date}.sql".toLowerCase()
                    res = sh(script: "test -f ${target_dir} && echo '1' || echo '0' ", returnStdout: true).trim()
                    if (res == '1') {
                        sh""" mkdir database
                                  cp ${target_dir} database/
                                  zip -r database-${BUILD_NUMBER}.zip database
                                  """
                        sshPublisher(publishers: [sshPublisherDesc(configName: 'TEST_SERVER',
                                  transfers: [sshTransfer(cleanRemote: false, excludes: '',
                                  execCommand: '', execTimeout: 0, flatten: false, makeEmptyDirs: false,
                                  noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '',
                                  remoteDirectorySDF: false, removePrefix: '',
                                  sourceFiles: "database-${BUILD_NUMBER}.zip")],
                                  usePromotionTimestamp: false, useWorkspaceInPromotion: false,
                                  verbose: true)])

                        sshPublisher(publishers: [sshPublisherDesc(configName: 'TEST_SERVER', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '''cd /home/devops
                                  unzip database-${BUILD_NUMBER}.zip -d /home/devops
                                  chmod -R 775 database
                                  cd /var/www/html/shfiles
                                  ./executeQuery.sh
                                  cd /home/devops
                                  rm -rf database-${BUILD_NUMBER}.zip''',
                                  execTimeout: 180000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false,
                                  patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false,
                                  removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false,
                                  useWorkspaceInPromotion: false, verbose: true)])
                    }
                               else {
                                echo 'No db script found'
                               }
                        }
                    }
        }
    }
    post {
        success {
            script {
                buildStatus = 'SUCCESS'
            }
        }
        unstable {
            script {
                buildStatus = 'UNSTABLE'
            }
        }
        failure {
            script {
                buildStatus = false
            }
        }
    }
}
// /**
//   STAGE 11. Sending Email notification to developers
//  */
//  if(buildStatus)
//  {
//     subject = "UPR ${branchname} SUCCESSFULLY DEPLOYED ON UAT SERVER";
//     env.content = "UPR #${branchname} is successfully deployed to the UAT server. Please verify your changes."
//  }
//   else if(buildStatus == "UNSTABLE")
//  {
//     subject = "UPR ${branchname} DEPLOYED ON TEST_SERVER IS UNSTABLE";
//     env.content = "UPR #${branchname}  deployed on Server is unstable. Please find the attachments for logs and take action accordingly"
//      attachment = true;
//  }
//  else
//  {
//     subject = "UPR ${branchname} BUILD FAILED ";
//     env.content = "UPR #${branchname} build failed to deploy on the UAT server. Please find the attachments for logs"
//      attachment = true;
//  }

//  emailext attachLog: attachment, body: '${SCRIPT, template="mail-html.template"}', mimeType: 'text/html', subject: "${subject}", to: 'sidharth.guleria@iqbsys.com'
