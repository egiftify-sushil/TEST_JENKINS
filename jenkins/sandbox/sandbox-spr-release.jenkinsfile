/**
THIS FILE UPLOADS SPR ON SANDBOX SERVER

We can upload to any codebase like java OR Php OR Delivery depending upon the use choice
There are 9 main stages involved in releasing the upr
STAGE 1:-  Verifying spr param and deleting pipeline workspace.
STAGE 2:-  Taking backup of old codes on servers in /var/devops/backups/{codbase}-sprNumber.zip.
STAGE 3:-  Doing checkout of SPR code(JAVA,PHP) using CVSSCM plugin configured on the jenkins. {Parallel}
STAGE 4:-  Running maven build on services and scheduler. Also running the composer to install yii2 framework {Parallel}
STAGE 5:-  Creating patch (code packaging). {Parallel}
STAGE 6.   Deploying patch on sandbox with the help of sshPublisher plugin
STAGE 7:-  Deploying patch on Sandbox with the help of sshPublisher plugin.{Parallel}
STAGE 8:-  Syncing & Invalidating assets using aws CLI.
STAGE 9:- Sending Email notification to developers.
PLUGINS USED:-
sshPublisher:- To upload folder and to execute ssh script on remote server 
CVSSCM:- To checkout the code from repository server

**/
def sprNumber = ""
def buildStatus = true;
def attachment = false;
pipeline {

     /** Defining workspace for the node **/
     agent any;
    /**
     Setting jdk for java build
    */
     tools {
       jdk "jdk14"
     }
     /**
       Params to define which codebase we want to upload 
     */
    parameters {
        booleanParam(name: "JAVA_RELEASE", defaultValue: false)
        booleanParam(name: "PHP_RELEASE", defaultValue: false)
        string(name: "SPR_NUMBER", defaultValue: '', description: 'Provide SPR Number')
    }
    stages {        
/**
  STAGE 1.Verifying Spr param and Deleting Pipeline Workspace
*/
       stage('Initiate SP Release'){
             steps {
             		 script {
           			    if (params.SPR_NUMBER == '') {
					         currentBuild.result = 'ABORTED'
					         error('UPR NUMBER Not  Defined…')
					     }else{
					          sprNumber = params.SPR_NUMBER;
					          cleanWs()
					          currentBuild.description ="SPR "+ params.SPR_NUMBER
					     }
                       }
                   }
            }
             
/**
 STAGE 2. Taking backup of old codes on servers in /var/devops/backups/ dir
          ssh plugin used to excute the ssh  command on  remote servers
*/
   stage('Backup'){
     parallel{
      stage('Java'){
         when { expression { params.JAVA_RELEASE } }
           steps {
                 
		            sshPublisher(publishers: [sshPublisherDesc(configName: 'Sandbox', 
		            transfers: [sshTransfer(cleanRemote: false, excludes: '', 
		            execCommand: """cd /var/devops/backups
					rm -rf webapps*
					cd /var/lib/tomcat9/webapps
					sudo zip -r   /var/devops/backups/webapps-${sprNumber}.zip  eg_merchant_services eg_lifeline_services eg_portal_services eg_customer_services eg_scheduler_services eg_scheduler""" , 
					execTimeout: 1200000, flatten: false, makeEmptyDirs: false, 
					noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', 
					remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, 
					useWorkspaceInPromotion: false,
					verbose: true)])
					
		          }
            } 
            stage('PHP'){
            when { expression { params.JAVA_RELEASE } }
             steps {
                 
		            sshPublisher(publishers: [sshPublisherDesc(configName: 'Sandbox', 
		            transfers: [sshTransfer(cleanRemote: false, excludes: '', 
		            execCommand: """cd /var/devops/backups
					rm -rf html*
				    cd /var/www/html
					sudo zip -r /var/devops/backups/html-${sprNumber}.zip  eg_customer_yii2/* eg_reseller_yii2/* eg_staff_yii2/* eg_merchant_yii2/* eg_yii2_framework_v2/* -x 'eg_customer_yii2/runtime/*' 'eg_reseller_yii2/runtime/*' 'eg_staff_yii2/runtime/*' 'eg_merchant_yii2/runtime/*' 'eg_yii2_framework_v2/runtime/*'""" , 
					execTimeout: 0, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, 
					patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, 
					removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, 
					useWorkspaceInPromotion: false, verbose: true)])
		          }
            }  
          }
         } 
/**
 STAGE 3. Doing Checkout of SPR code using CVSSCM plugin configured on the jenkins.     
 */      
   stage('Code Checkout'){
      parallel{
         stage('Java  Checkout'){
    	   when { expression { params.JAVA_RELEASE} }
             steps {
		              withCredentials([string(credentialsId: 'CVSPATH', variable: 'CVSPATH'), string(credentialsId: 'CVSPASSWORD', variable: 'CVSPASSWORD')]) {
		              checkout changelog: true, poll: false, scm: [$class: 'CVSSCM', canUseUpdate: false, checkoutCurrentTimestamp: false, cleanOnFailedUpdate: true, disableCvsQuiet: true, forceCleanCopy: false, legacy: true, pruneEmptyDirectories: false, 
		              repositories: [[compressionLevel: -1, cvsRoot: "${CVSPATH}", excludedRegions: [[pattern: '']], password:"${CVSPASSWORD}", passwordRequired: true, 
		              repositoryItems: [[location: [$class: 'BranchRepositoryLocation', branchName: sprNumber, useHeadIfNotFound: false], 
		              modules: [[localName: 'eg_objects', remoteName: 'eg_objects'], 
		              [localName: 'eg_platform', remoteName: 'eg_platform'], 
		              [localName: 'scheduler_base', remoteName: 'scheduler_base'], 
		              [localName: 'eg_portal_services', remoteName: 'eg_portal_services'], 
		              [localName: 'eg_lifeline_services', remoteName: 'eg_lifeline_services'], 
		              [localName: 'eg_customer_services', remoteName: 'eg_customer_services'], 
		              [localName: 'eg_merchant_services', remoteName: 'eg_merchant_services'],
		              [localName: 'eg_scheduler_services', remoteName: 'eg_scheduler_services'],
		              [localName: 'eg_scheduler', remoteName: 'eg_scheduler']]]]]], 
		              skipChangeLog: false]
	               }
                }
            }
            
            stage('PHP Checkout'){
              	when { expression { params.PHP_RELEASE } }
                  steps {
		                  sh ''' 
		                   mkdir html
		                  '''
			              withCredentials([string(credentialsId: 'CVSPATH', variable: 'CVSPATH'), string(credentialsId: 'CVSPASSWORD', variable: 'CVSPASSWORD')]) {
			              checkout changelog: true, poll: false, scm: [$class: 'CVSSCM', canUseUpdate: false, checkoutCurrentTimestamp: false, cleanOnFailedUpdate: false, disableCvsQuiet: true, forceCleanCopy: false, legacy: false, pruneEmptyDirectories: false, 
			              repositories: [[compressionLevel: -1, cvsRoot: "${CVSPATH}", excludedRegions: [[pattern: '']], password:"${CVSPASSWORD}", passwordRequired: true, 
			              repositoryItems: [[location: [$class: 'BranchRepositoryLocation', branchName: sprNumber, useHeadIfNotFound: false], 
			              modules: [
			              [localName: 'html/eg_reseller_yii2', remoteName: 'eg_reseller_yii2'], 
			              [localName: 'html/eg_customer_yii2', remoteName: 'eg_customer_yii2'], 
			              [localName: 'html/eg_staff_yii2', remoteName: 'eg_staff_yii2'], 
			              [localName: 'html/eg_merchant_yii2', remoteName: 'eg_merchant_yii2'],
			              [localName: 'html/eg_yii2_framework_v2', remoteName: 'eg_yii2_framework_v2']]]]]], 
			              skipChangeLog: false]
                         }
                    }
                 } 
              } 
           }  
  
 /**
   STAGE 4.Running Maven Build on Services,Scheduler and doing composer install on yii2 framework
 */  
 
       stage('Build')
       {
 		 stages {
     		stage('Platform') {
		             when { expression { params.JAVA_RELEASE } }
			               steps{
			                      sh '''cd eg_objects
										mvn clean
										mvn install -U
										cd ..
										cd eg_platform
										cd platform
										mvn clean
										mvn install -U
										cd ..
										mvn clean
										mvn install -U 
										cd ..
										cd scheduler_base
										mvn clean
										mvn install -U
										cd ..
										'''
			                    } 
		            }
           stage('Build Services'){
               parallel{
                    stage('Building Portal Services'){
                      when { expression { params.JAVA_RELEASE} }
                        steps {
                          sh '''
                           cd eg_portal_services
						   mvn clean
						   mvn package
							'''
						  }
				     }
				     stage('Building Customer Services'){
                      when { expression { params.JAVA_RELEASE} }
                        steps {
                          sh '''cd eg_customer_services
 								 mvn clean
								 mvn package'''
					  				
						  }
				      } 
					  stage('Building Lifeline Services'){
                    	   when { expression { params.JAVA_RELEASE} }
	                       steps {
	                          sh '''cd eg_lifeline_services
 								 mvn clean
								 mvn package'''
							 }
					  } 	
				      stage('Building Merchant Services'){
                    	   when { expression { params.JAVA_RELEASE} }
	                       steps {
	                          sh '''cd eg_merchant_services
 								 mvn clean
								 mvn package'''
							  }
				       }
			          stage('Building Scheduler Services'){
                	   when { expression { params.JAVA_RELEASE} }
                       steps {
                           sh '''cd eg_scheduler_services
							 mvn clean
							 mvn package'''
						  }
						 }
					  stage('Building Scheduler'){
                	   when { expression { params.JAVA_RELEASE} }
                       steps {
                          sh''' cd eg_scheduler
							 mvn clean
							 mvn package'''
						  }
					   }
					 stage('Building Yii2 Framework'){
                	   when { expression { params.PHP_RELEASE} }
                       steps {
                          sh''' cd html
								cd eg_yii2_framework_v2
								composer install'''
						  }
					    }
				      }
				    }     
                 }  
               }   
/**
   STAGE 5.Creating Patch (Running maven build,php composer and code packaging)
*/  
	 stage('Create Patch')
  	 {
        parallel{
        	 stage('Creating Services & Scheduler Patch'){
         		when { expression { params.JAVA_RELEASE} }
            		steps {
		               sh '''
		               mkdir webapps
		               mkdir webapps/eg_portal_services
		               mkdir webapps/eg_customer_services
		               mkdir webapps/eg_merchant_services
		               mkdir webapps/eg_lifeline_services
		               mkdir webapps/eg_scheduler_services
                       mkdir webapps/eg_scheduler
 					   mkdir webapps/eg_scheduler/lib
					   cd eg_portal_services
					   unzip -o target/eg_portal_services.war -d ../webapps/eg_portal_services
					   cd ..
					   cd eg_customer_services
					   unzip -o target/eg_customer_services.war -d ../webapps/eg_customer_services
					   cd ..
					   cd eg_lifeline_services
					   unzip -o target/eg_lifeline_services.war -d ../webapps/eg_lifeline_services
					   cd ..
					   cd eg_merchant_services
					   unzip -o target/eg_merchant_services.war -d ../webapps/eg_merchant_services
					   cd ..
					   cd eg_scheduler_services
					   unzip -o target/eg_scheduler_services.war -d ../webapps/eg_scheduler_services
					   cd ..
					   cd eg_scheduler
					   cp -r target/lib/* ../webapps/eg_scheduler/lib
					   cd ..
					   zip -r webapps.zip webapps'''
				  }
           }

       	  stage('Creating PHP Patch'){
                when { expression { params.PHP_RELEASE} }
                steps {
                  sh '''
					find html -type d -name "CVS*" -print0 | xargs -0 -I {} /bin/rm -rf "{}"
					zip -r html.zip html/*
					'''
                }
             } 
          }
       }   
                     
/**
 STAGE 6. Deploying Patch on servers(JAVA,PHP ) with the help of sshPublisher plugin
*/ 
         stage('Deploy Patch'){
                 parallel{
                    stage('Deploying Services & Scheduler'){
                      when { expression { params.JAVA_RELEASE} }
                        steps {
  				        sshPublisher(publishers: [sshPublisherDesc(configName: 'Sandbox', 
  				        transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', 
  				        execTimeout: 0, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, 
  				        patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', 
  				        sourceFiles: 'webapps.zip')], usePromotionTimestamp: false, 
  				        useWorkspaceInPromotion: false, verbose: true)])
  				        
                        sshPublisher(publishers: [sshPublisherDesc(configName: 'Sandbox', 
                        transfers: [sshTransfer(cleanRemote: false, excludes: '', 
                        execCommand: '''cd /var/lib/tomcat9/webapps
						sudo rm -rf  eg_lifeline_services/WEB-INF/lib/* 
						sudo rm -rf  eg_merchant_services/WEB-INF/lib/*
						sudo rm -rf  eg_portal_services/WEB-INF/lib/*
						sudo rm -rf  eg_customer_services/WEB-INF/lib/*
						sudo rm -rf  eg_scheduler_services/WEB-INF/lib/*
						sudo rm -rf  eg_scheduler/lib/*
						cd /home/devops
						sudo unzip -o webapps.zip -d /var/lib/tomcat9/
						sudo rm -rf /home/devops/webapps.zip ''',
						execTimeout: 0, flatten: false, 
						makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', 
						remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], 
						usePromotionTimestamp: false, useWorkspaceInPromotion: false,
						verbose: true)])
						
						sshPublisher(publishers: [sshPublisherDesc(configName: 'Sandbox', 
						transfers: [sshTransfer(cleanRemote: false, excludes: '', 
						execCommand: '''cd /var/www/html/shfiles
						sudo ./killSchedularProcess.sh
						cd /opt/tomcat9/bin
						sudo ./shutdown.sh  2>/dev/null
						sudo sleep 5
						sudo ./startup.sh
						sudo sleep 10
						cd /var/www/html/shfiles
						sudo ./schedularProcess.sh''', execTimeout: 0, flatten: false, makeEmptyDirs: false,
					    noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', 
					    remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], 
					    usePromotionTimestamp: false, useWorkspaceInPromotion: false, 
					    verbose: true)])
						   
					 }
                   }
                      stage('PHP'){
                        when { expression { params.PHP_RELEASE} }
	                        steps {
	                        sshPublisher(publishers: [sshPublisherDesc(configName: 'Sandbox', 
	                        transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', 
	                        execTimeout: 0, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, 
	                        patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, 
	                        removePrefix: '', sourceFiles: 'html.zip')], usePromotionTimestamp: false, 
	                        useWorkspaceInPromotion: false, verbose: true)])
	                        
	                        sshPublisher(publishers: [sshPublisherDesc(configName: 'Sandbox', 
	                        transfers: [sshTransfer(cleanRemote: false, excludes: '', 
	                        execCommand: '''cd /home/devops
							cd /var/www/html
							sudo rm -rf  eg_yii2_framework_v2
							cd /home/devops
							sudo unzip -o html.zip -d /var/www/
							sudo chmod -R 777 /var/www/html/eg_yii2_framework_v2/
							sudo rm -rf /home/devops/html.zip''', 
							execTimeout: 0, flatten: false, 
							makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', 
							remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], 
							usePromotionTimestamp: false, useWorkspaceInPromotion: false, 
							verbose: true)])
						}
                       }
                    }
               }
/**
  STAGE 7.Syncing & Invalidating assets using aws CLI
*/  
        stage('CDN Sync')
		   {
		     when { expression { params.PHP_RELEASE} }
               steps {
		        sshPublisher(publishers: [sshPublisherDesc(configName: 'Sandbox', 
		        transfers: [sshTransfer(cleanRemote: false, excludes: '', 
		        execCommand: '''cd /home/devops
				if [ ! -d "common" ]; then
				     sudo mkdir common
				     sudo mkdir common/css
				     sudo mkdir common/js
				fi
				cd /var/www/html
				find eg_customer_yii2/components eg_merchant_yii2/components eg_staff_yii2/components eg_reseller_yii2/components -type f -name "*.css" -exec cp -n {} /home/devops/common/css/ \\;
				find eg_customer_yii2/components eg_merchant_yii2/components eg_staff_yii2/components  eg_reseller_yii2/components -type f -name "*.js" -exec cp -n {} /home/devops/common/js/ \\;
				sudo rm -rf /home/devops/common/js/awss3.js
				cd eg_yii2_framework_v2/egiftify_extensions
				sudo aws s3 cp --recursive onboarding/js/ s3://egsandbox/public/js/common/
				sudo aws s3 cp --recursive onboarding/css/ s3://egsandbox/public/css/common/
				sudo aws s3 cp --recursive payment/js/ s3://egsandbox/public/js/common/
				sudo aws s3 cp --recursive payment/css/ s3://egsandbox/public/css/common/
				sudo aws s3 cp --recursive commonAssets/js/ s3://egsandbox/public/js/common/
				sudo aws s3 cp --recursive commonAssets/css/ s3://egsandbox/public/css/common/
				sudo aws s3 cp --recursive payment/images/ s3://egsandbox/public/images/common/
				sudo aws s3 cp --recursive onboarding/images/ s3://egsandbox/public/images/common/
				cd /var/www/html
				sudo aws s3 cp --recursive eg_customer_yii2/js/ s3://egsandbox/public/js/marketplace/
				sudo aws s3 cp --recursive eg_staff_yii2/js/ s3://egsandbox/public/js/staff/
				sudo aws s3 cp --recursive eg_reseller_yii2/js/ s3://egsandbox/public/js/reseller/
				sudo aws s3 cp --recursive eg_merchant_yii2/js/ s3://egsandbox/public/js/merchant/
				sudo aws s3 cp --recursive /home/devops/common/js/ s3://egsandbox/public/js/common/
				sudo aws s3 cp --recursive eg_customer_yii2/css/ s3://egsandbox/public/css/marketplace/
				sudo aws s3 cp --recursive eg_staff_yii2/css/ s3://egsandbox/public/css/staff/
				sudo aws s3 cp --recursive eg_reseller_yii2/css/ s3://egsandbox/public/css/reseller/
				sudo aws s3 cp --recursive eg_merchant_yii2/css/ s3://egsandbox/public/css/merchant/
				sudo aws s3 cp --recursive /home/devops/common/css/ s3://egsandbox/public/css/common/
				sudo aws s3 cp --recursive eg_customer_yii2/images/ s3://egsandbox/public/images/marketplace/
				sudo aws s3 cp --recursive eg_staff_yii2/images/ s3://egsandbox/public/images/staff/
				sudo aws s3 cp --recursive eg_reseller_yii2/images/ s3://egsandbox/public/images/reseller/
				sudo aws s3 cp --recursive eg_merchant_yii2/images/ s3://egsandbox/public/images/merchant/
				sudo aws cloudfront create-invalidation --distribution-id EVCA2IXYQTHK2 --paths "/js/*" "/css/*" "/images/*"
				sudo rm -rf /home/devops/common/css/*
				sudo rm -rf /home/devops/common/js/*''',  
				execTimeout: 0, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, 
				patternSeparator: '[, ]+', remoteDirectory: '', 
				remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], 
				usePromotionTimestamp: false, useWorkspaceInPromotion: false,
				verbose: true)])
		      }
			}
          }  
          post {
		         success {
		                  script{
		                      buildStatus = "SUCCESS"
		                      }
					     }   
			     unstable {
				          script{
				           	  buildStatus = "UNSTABLE"
				          }
		               	}
		         failure {
			             script{
				          	   buildStatus = "FAILED"
			             }
                 	   }
              }     
        }
 
 /**
  STAGE 8. Sending Email notification to developers
 */
 if(buildStatus == "SUCCESS")
 {
    subject = "SPR ${sprNumber} SUCCESSFULLY DEPLOYED ON SANDBOX";
    env.content = "SPR ${sprNumber} is successfully deployed on Sandbox. Testing on the servers is underway"
 }
 else if(buildStatus == "UNSTABLE")
 {
    subject = "SPR ${sprNumber}  BUILD NUMBER  DEPLOYED ON SANDBOX IS UNSTABLE";
	env.content = "SPR ${sprNumber}  deployed on Sandbox server is unstable. Please find the attachments for logs and take action accordingly"
 	attachment = true;
 }
 else
 {
    subject = "SPR ${sprNumber} FAILED TO DEPLOY ON SANDBOX";
	env.content = "SPR ${sprNumber} is unstable and failed to deploy on Sandbox. Please find the attachments for logs"
 	attachment = true;
 } 
 
 if(sprNumber!='')
 emailext attachLog: attachment, body: '${SCRIPT, template="mail-html.template"}', mimeType: 'text/html', subject: "${subject}", to: '$DEFAULT_RECIPIENTS'
          
      