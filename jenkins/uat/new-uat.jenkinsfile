/**
UAT PIPELINE : FILE FOR UAT SERVER

There are 9 stages involved in UAT process
STAGE 1:-  Deleting pipeline workspace
STAGE 2:-  Doing repos checkout(JAVA & PHP) in parallel stages
STAGE 3:-  Doing repos checkout spring from git
STAGE 4:-  Running maven build on services and scheduler.
STAGE 5:-  Creating patch (code packaging)
STAGE 6:-  Deploying patch on uat server.
STAGE 7:-  CDN syncing & invalidating assets using aws CLI.
STAGE 8:-  Running Db Script if any.
STAGE 9:-  Sending Email notification to developers

PLUGINS USED:-
sshPublisher:- To upload folder and to execute ssh script on remote server
CVSSCM:- To checkout the code from repository server

**/
def gitbranch = ''
def cvsbranchname = ''
def buildStatus = true
def attachment = false
def sqlFilePath = ''

def springplatformRepos = [
    'sp_dynamo_document',
    'sp_mysql_application_entity',
    'object_library',
    'processing_system'

]

def springcommonRepos = [
    'global_meta',
    'jersey_object_library'
]
def checkoutRepo(type, branchName, modules) {
    withCredentials([string(credentialsId: 'CVSPATH', variable: 'CVSPATH'), string(credentialsId: 'CVSPASSWORD', variable: 'CVSPASSWORD')]) {
        checkout changelog: true, poll: false, scm: [$class: 'CVSSCM', 
            canUseUpdate: false, 
            checkoutCurrentTimestamp: false, 
            cleanOnFailedUpdate: false, 
            disableCvsQuiet: true, 
            forceCleanCopy: false, 
            legacy: false, 
            pruneEmptyDirectories: false, 
            repositories: [[compressionLevel: -1, cvsRoot: "${CVSPATH}", 
            excludedRegions: [[pattern: '']], 
            password: "${CVSPASSWORD}", 
            passwordRequired: true, 
            repositoryItems: modules.collect { [location: [$class: 'BranchRepositoryLocation', branchName: branchName, useHeadIfNotFound: false], 
            modules: [[localName: it[0], remoteName: it[1]]]] }], 
            skipChangeLog: false]
        ]
    }
}
def checkoutRepos(repos) {
    withCredentials([string(credentialsId: 'GITURL', variable: 'GITURL')]) {
        repos.each { repo ->
            dir(repo) {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "${gitbranch}"]],
                    userRemoteConfigs: [[url: "${GITURL}/${repo}.git"]]
                ])
            }
        }
    }
}
pipeline {
    agent any
	tools {
			jdk 'jdk14'
			nodejs 'nodejs14'
		}

    parameters {
        booleanParam(name: 'JERSEY_RELEASE', defaultValue: true)
        booleanParam(name: 'PHP_RELEASE', defaultValue: true)
        booleanParam(name: 'ANGULAR_RELEASE', defaultValue: true)
        booleanParam(name: 'OPS_RELEASE', defaultValue: true)
        string(name: 'GIT_BRANCH_NAME', defaultValue: '', description: 'Provide GIT Branch Name')
        string(name: 'CVS_BRANCH_NAME', defaultValue: '', description: 'Provide CVS Branch Name')
        string(name: 'DB_FILE_PATH', defaultValue: '', description: 'Provide db file path if any')
    }

    stages {
        /**
         STAGE 1: Deleting Pipeline Workspace
         */
        stage('Preparing For UAT Upload') {
            steps {
                script {
                    if ((params.JERSEY_RELEASE || params.OPS_RELEASE) && (params.GIT_BRANCH_NAME == '' || params.GIT_BRANCH_NAME == null)) {
                        currentBuild.result = 'ABORTED'
                        error('GIT Branch Name is required for JERSEY_RELEASE or OPS_RELEASE')
                    }

                    gitbranch = params.GIT_BRANCH_NAME
                    cvsbranchname = params.CVS_BRANCH_NAME
                    sqlFilePath = params.DB_FILE_PATH

                    // Clean workspace
                    cleanWs()

                    // Set build description with both branch names
                    currentBuild.description = "GIT Branch: ${gitbranch}, CVS Branch: ${cvsbranchname}"
                }
            }
        }

        /**
         STAGE 2: Doing CVS Repos Checkout
         */
			stage('Code Checkout') {
				parallel {
					stage('JERSEY Services Checkout') {
						when { expression { params.JERSEY_RELEASE } }
						steps {
							checkoutRepo('JERSEY', "${cvsbranchname}", [
								['eg_objects', 'eg_objects'],
								['eg_platform', 'eg_platform'],
								['scheduler_base', 'scheduler_base'],
								['eg_portal_services', 'eg_portal_services'],
								['eg_lifeline_services', 'eg_lifeline_services'],
								['eg_customer_services', 'eg_customer_services'],
								['eg_merchant_services', 'eg_merchant_services'],
								['eg_scheduler_services', 'eg_scheduler_services'],
								['eg_scheduler', 'eg_scheduler']
							])
						}
					}

					stage('PHP Repos Checkout') {
						when { expression { params.PHP_RELEASE } }
						steps {
							sh 'mkdir -p html'
							checkoutRepo('PHP', "${cvsbranchname}", [
								['html/eg_reseller_yii2', 'eg_reseller_yii2'],
								['html/eg_customer_yii2', 'eg_customer_yii2'],
								['html/eg_staff_yii2', 'eg_staff_yii2'],
								['html/eg_merchant_yii2', 'eg_merchant_yii2'],
								['html/eg_yii2_framework_v2', 'eg_yii2_framework_v2']
							])
						}
					}

					stage('Angular Repos Checkout') {
						when { expression { params.ANGULAR_RELEASE } }
						steps {
							sh 'mkdir -p angular'
							checkoutRepo('Angular', "${cvsbranchname}", [
								['angular/eg_customer_ang_v1', 'eg_customer_ang_v1']
							])
						}
					}
				}
			}
			/**
			STAGE 3: Doing GIT Repos Checkout
			*/
			stage('Common Spring Repos Checkout') {
				parallel {
					stage('platform') {
						when { expression { params.OPS_RELEASE } }
						steps {
							script {
								checkoutRepos(springplatformRepos)
							}
						}
					}

					stage('Spring common Libraries') {
						when { expression { params.JERSEY_RELEASE } }
						steps {
							script {
								checkoutRepos(springcommonRepos)
							}
						}
					}
				}
			}

			/**
			STAGE 4: Running Maven Build and NPM on Services
			*/
			stage('Build')
			{
				stages { 
					stage('Building global meta and jersey object') {
						parallel {
							stage('Building Common Spring Jars') {
								when {
									expression { params.JERSEY_RELEASE }
								}
								tools {
									jdk "jdk17"
								}
								steps {
									script {
										def mavenCommands = [
											'mvn clean install'
										]

										springcommonRepos.each { repo1 ->
											dir(repo1) {
												mavenCommands.each { command ->
													sh """                                   
													${command}
													"""
												}
											}
										}
									}
								}
							}

							stage('Building OPS') {
								when {
									expression { params.OPS_RELEASE }
								}
								tools {
									jdk "jdk17"
								}
								steps {
									script {
										def mavenCommands = [
											'mvn clean install'
										]

										springplatformRepos.each { repo1 ->
											dir(repo1) {
												mavenCommands.each { command ->
													sh """                                   
													${command}
													"""
												}
											}
										}
									}
								}
							}
						}
					}

					stage('Running Maven and Npm build'){
						parallel{
							stage('Building legacy platform') {
								when {
									expression { params.JERSEY_RELEASE}
								}
								steps {
									script {
										def buildSteps = [
											['name': 'eg_objects', 'path': 'eg_objects'],
											['name': 'eg_platform/platform', 'path': 'eg_platform/platform'],
											['name': 'eg_platform', 'path': 'eg_platform'],
											['name': 'scheduler_base', 'path': 'scheduler_base']
										]
										buildSteps.each { step ->
											dir(step.path) {
												sh 'mvn clean'
												sh 'mvn install -U'
											}
										}
									}
								}
							}
							stage('Building angular services') {
									when {
										expression { params.ANGULAR_RELEASE }
									}
									steps {
											script {
											withEnv(["PATH+NODE=${tool name: 'nodejs14'}/bin"]) {
													sh '''
													cd angular/eg_customer_ang_v1
													
													# Install project dependencies                                   
														npm install

													# Build the project
														ng build --configuration=production --output-path=dist/customer --base-href /customer/ --deploy-url /customer/
														ng build --configuration=production --output-path=dist/wallet --base-href /wallet/ --deploy-url /wallet/

													# Check if html directory exists and move the folders accordingly
														if [ -d "../../html" ]; then
														cp -r dist/customer ../../html/
														cp -r dist/wallet ../../html/
														else
														mkdir -p ../../html
														cp -r dist/customer ../../html/
														cp -r dist/wallet ../../html/
														fi
						
													'''
												}
											}
										}
								}
							}
						}

					stage('Building legacy services') {
						when { expression { params.JERSEY_RELEASE } }
							parallel {
								stage('Build eg_portal_services') {
									steps {
										dir('eg_portal_services') {
											sh 'mvn clean package'
										}
									}
								}
								stage('Build eg_customer_services') {
									steps {
										dir('eg_customer_services') {
											sh 'mvn clean package'
										}
									}
								}
								stage('Build eg_lifeline_services') {
									steps {
										dir('eg_lifeline_services') {
											sh 'mvn clean package'
										}
									}
								}
								stage('Build eg_merchant_services') {
									steps {
										dir('eg_merchant_services') {
											sh 'mvn clean package'
										}
									}
								}
								stage('Build eg_scheduler_services') {
									steps {
										dir('eg_scheduler_services') {
											sh 'mvn clean package'
										}
									}
								}
								stage('Build eg_scheduler') {
									steps {
										dir('eg_scheduler') {
											sh 'mvn clean package'
										}
									}
								}
							}
						}
			}    } 

        /**
         STAGE 5: Creating Patch (Code Packaging)
         */
        stage('Create Patch')
		{
			parallel {
				stage('Create Services & Scheduler Patch') {
					when { expression { params.JERSEY_RELEASE } }
					steps {
						sh '''
					mkdir webapps
					mkdir webapps/eg_portal_services
					mkdir webapps/eg_customer_services
					mkdir webapps/eg_merchant_services
					mkdir webapps/eg_lifeline_services
					mkdir webapps/eg_scheduler_services
					mkdir webapps/eg_scheduler
					mkdir webapps/eg_scheduler/lib
				if [ -d "eg_portal_services" ]; then
					cd eg_portal_services
					unzip -o target/eg_portal_services.war -d ../webapps/eg_portal_services
					cd ..
				fi
				if [ -d "eg_customer_services" ]; then
					cd eg_customer_services
					unzip -o target/eg_customer_services.war -d ../webapps/eg_customer_services
					cd ..
				fi
				if [ -d "eg_lifeline_services" ]; then
					cd eg_lifeline_services
					unzip -o target/eg_lifeline_services.war -d ../webapps/eg_lifeline_services
					cd ..
				fi
				if [ -d "eg_merchant_services" ]; then
					cd eg_merchant_services
					unzip -o target/eg_merchant_services.war -d ../webapps/eg_merchant_services
					cd ..
				fi
				if [ -d "eg_scheduler_services" ]; then
					cd eg_scheduler_services
					unzip -o target/eg_scheduler_services.war -d ../webapps/eg_scheduler_services
					cd ..
				fi
				if [ -d "eg_scheduler" ]; then
					cd eg_scheduler
					cp -r target/lib/* ../webapps/eg_scheduler/lib
					cd ..
					fi
				zip -r webapps.zip webapps'''
					}
				}
				stage('Create PHP Patch') {
					when { expression { params.PHP_RELEASE } }
					steps {
						sh '''
					cd html
					cd eg_yii2_framework_v2
					composer install
					cd ..
					cd ..
					sudo find html -type d -name "CVS*" -print0 | xargs -0 -I {} /bin/rm -rf "{}"
					zip -r html.zip html/*
					'''
					}
				}
				stage('Create Angular Patch') {
					when {
						expression {
							params.ANGULAR_RELEASE && !params.PHP_RELEASE
						}
					}
					steps {
						sh '''                   
						sudo find html -type d -print0 | xargs -0 -I {} /bin/rm -rf "{}"
						zip -r html.zip html/*
					'''
					}
				}
			}
      	 }
        /**
         STAGE 6: Deploying Patch on UAT Server
         */
        stage('Deploy') {
            parallel {
                    stage('JERSEY') {
                    when { expression { params.JERSEY_RELEASE } }
                        steps {
                        sshPublisher(publishers: [sshPublisherDesc(configName: 'TEST_SERVER',
                          transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '',
                          execTimeout: 0, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false,
                          patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '',
                          sourceFiles: 'webapps.zip')], usePromotionTimestamp: false, useWorkspaceInPromotion: false,
                          verbose: true)])

                        sshPublisher(publishers: [sshPublisherDesc(configName: 'TEST_SERVER',
                        transfers: [sshTransfer(cleanRemote: false, excludes: '',
                        execCommand: '''cd /home/devops

                        sudo unzip -o webapps.zip
                        cd webapps
                        if [ -d "eg_lifeline_services" ]; then
                           sudo rm -rf  /var/lib/tomcat9/webapps/eg_lifeline_services/WEB-INF/lib/*
                        fi
                        if [ -d "eg_merchant_services" ]; then
                            sudo rm -rf  /var/lib/tomcat9/webapps/eg_merchant_services/WEB-INF/lib/*
                        fi
                        if [ -d "eg_portal_services" ]; then
                            sudo rm -rf  /var/lib/tomcat9/webapps/eg_portal_services/WEB-INF/lib/*
                        fi
                        if [ -d "eg_customer_services" ]; then
                            sudo rm -rf  /var/lib/tomcat9/webapps/eg_customer_services/WEB-INF/lib/*
                        fi
                        if [ -d "eg_scheduler_services" ]; then
                            sudo rm -rf  /var/lib/tomcat9/webapps/eg_scheduler_services/WEB-INF/lib/*
                        fi
                        if [ -d "eg_scheduler" ]; then
                            sudo rm -rf  /var/lib/tomcat9/webapps/eg_scheduler/lib/*
                        fi
                        cd /home/devops
                        sudo unzip -o webapps.zip -d /var/lib/tomcat9/
                        sudo rm -rf /home/devops/webapps*
                        sudo rm -rf /home/devops/eg*''', execTimeout: 0, flatten: false, makeEmptyDirs: false,
                        noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '',
                        remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')],
                        usePromotionTimestamp: false, useWorkspaceInPromotion: false,
                        verbose: true)])

                        sshPublisher(publishers: [sshPublisherDesc(configName: 'TEST_SERVER',
                        transfers: [sshTransfer(cleanRemote: false, excludes: '',
                        execCommand: '''
                        echo "deployig"
                        ''', execTimeout: 0, flatten: false, makeEmptyDirs: false,
                        noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '',
                        remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')],
                        usePromotionTimestamp: false, useWorkspaceInPromotion: false,
                        verbose: true)])
                        }
                    }

                stage('PHP') {
                        when { expression { params.PHP_RELEASE } }
                            steps {
                            sshPublisher(publishers: [sshPublisherDesc(configName: 'TEST_SERVER',
                            transfers: [sshTransfer(cleanRemote: false, excludes: '',
                            execCommand: '',
                            execTimeout: 0, flatten: false, makeEmptyDirs: false,
                            noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '',
                            remoteDirectorySDF: false, removePrefix: '', sourceFiles: 'html.zip')],
                            usePromotionTimestamp: false, useWorkspaceInPromotion: false,
                            verbose: true)])

                            sshPublisher(publishers: [sshPublisherDesc(configName: 'TEST_SERVER',
                            transfers: [sshTransfer(cleanRemote: false, excludes: '',
                            execCommand: '''
                            echo "deploying html.zip"
                            cd /home/devops
                            sudo rm -rf  /var/www/html/eg_yii2_framework_v2/*
                            sudo unzip -o html.zip -d /var/www/
                            sudo chmod -R 755 /var/www/html/eg_yii2_framework_v2/
                            sudo rm -rf /home/devops/html.zip''',
                            execTimeout: 0, flatten: false,
                            makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+',
                            remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')],
                            usePromotionTimestamp: false, useWorkspaceInPromotion: false,
                            verbose: true)])
                            }
                }
                stage('ANGULAR') {
                    when {
                        expression {
                            params.ANGULAR_RELEASE && !params.PHP_RELEASE
                        }
                         }
                            steps {
                            sshPublisher(publishers: [sshPublisherDesc(configName: 'TEST_SERVER',
                            transfers: [sshTransfer(cleanRemote: false, excludes: '',
                            execCommand: '',
                            execTimeout: 0, flatten: false, makeEmptyDirs: false,
                            noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '',
                            remoteDirectorySDF: false, removePrefix: '', sourceFiles: 'html.zip')],
                            usePromotionTimestamp: false, useWorkspaceInPromotion: false,
                            verbose: true)])

                            sshPublisher(publishers: [sshPublisherDesc(configName: 'TEST_SERVER',
                            transfers: [sshTransfer(cleanRemote: false, excludes: '',
                            execCommand: '''cd /home/devops
                            sudo rm -rf  /var/www/html/*
                            sudo unzip -o html.zip -d /var/www/
                            sudo chmod -R 755 /var/www/html/
                            sudo rm -rf /home/devops/html.zip''',
                            execTimeout: 0, flatten: false,
                            makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+',
                            remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')],
                            usePromotionTimestamp: false, useWorkspaceInPromotion: false,
                            verbose: true)])
                            }
                }
                stage('OPS')
                       {
                            when { expression { params.OPS_RELEASE } }
                            steps
                            {
                                sshPublisher(
                                    publishers:[
                                        sshPublisherDesc(
                                            configName: 'TEST_SERVER',
                                            transfers:[
                                                sshTransfer(
                                                    cleanRemote: false,
                                                    excludes: '',
                                                    execCommand: '',
                                                    execTimeout: 0,
                                                    flatten: false,
                                                    makeEmptyDirs: false,
                                                    noDefaultExcludes: false,
                                                    patternSeparator: '[, ]+',
                                                    remoteDirectory: 'processing_system',
                                                    remoteDirectorySDF: false,
                                                    removePrefix: 'processing_system/target',
                                                    sourceFiles: 'processing_system/target/ops.jar')],
                                            usePromotionTimestamp: false,
                                            useWorkspaceInPromotion: false,
                                            verbose: true)])
                            }
                       }
            }
        }
    

        /**
         STAGE 8: Running DB Script If Any
         */
      
    }

    post {
        success {
            script {
                buildStatus = 'SUCCESS'
            }
        }
        unstable {
            script {
                buildStatus = 'UNSTABLE'
            }
        }
        failure {
            script {
                buildStatus = false
            }
        }
    }
}
